@Tutorial(time: 35) {
    @Intro(title: "Create the List View and understand Swift's flavor of Dependency Injection") {
        Create the list view of all the Lean Coffee Events and learn about Dependency Injection with SwiftUI.
        @Image(source: "coffee-beans.png", alt: "Coffee Beans")
    }
    
    @Section(title: "A laundry list of things to do.") {
        @ContentAndMedia {
            Here we'll create the "Home View" of the application. This is the primary view that will display the list of Lean Coffee events to the user. 
            @Image(source: "swift.png", alt: "swift logo")
        }
        
        @Steps {
            @Step {
                The very first thing we'll do in this chapter is lay out the LeanCoffee model we'll need to create this view. You find the api docs [here](https://github.com/JZDesign/LeanCoffeeService). In those docs you'll see the json response models for a `LeanCoffee`, a `Topic`, and a `Vote` among others. 
                
                Create a new file named `Models.swift` and copy the model there. An important thing to note is the [`Identifiable`](https://developer.apple.com/documentation/swift/identifiable) protocol on the struct. This is a protocol that SwiftUI uses to optmize the way a [`List`](https://developer.apple.com/documentation/swiftui/list/) works.
                @Code(name: "Models.swift", file: LeanCoffeeModels.swift)
            }
            
            @Step {
                With that in place, let's create a new file named `HomeView.swift`. The body content will be a `NavigationView`, which is a view SwiftUI provides out of the box to handle some basic navigation for us. 
                
                Adding a title to the content of the `NavigationView` applies that large title text in the view that you see in the preview. It also acts as the back button text if there is a presented view on the navigation stack. For more information about `NavigationView` you can read the [SwiftUI Documentation](https://developer.apple.com/documentation/swiftui/navigationview)
                @Code(name: "HomeView.swift", file: HomeView1.swift) {
                    @Image(source: "HomeView1.png", alt: "A view")
                }
            }
            
            @Step {
                The primary content of this view will be a list. Lists need an array of identifiable data to be easily created. So, we'll mock out some lean coffee data to create our list.
                @Code(name: "HomeView.swift", file: HomeView2.swift) {
                    @Image(source: "HomeView2.png", alt: "A view")
                }
            }
            
            @Step {
                Now we can make each row a [`NavigationLink`](https://developer.apple.com/documentation/swiftui/navigationlink) that will allow the user to tap it and bring them to a detail view about that row content.
                
                This is really the core of this view. Now we need to populate it with some data. Let's go make a presenter for the home view that will fetch these lean coffee events for us.
                @Code(name: "HomeView.swift", file: HomeView3.swift) {
                    @Image(source: "HomeView3.png", alt: "A view")
                }
            }
            
            @Step {
                Looking at the [documentation](https://github.com/JZDesign/LeanCoffeeService#get-all-lean-coffee-events) on the endpoint we'll use to get the lean coffee events, it shows that the access token is required. So we need to include it as part of this presenter.  
                @Code(name: "HomePresenter.swift", file: HomePresenter1.swift) 
            }
            
            
            @Step {
                Create an async function named `refreshEvents` and a local published variable to hold the result of the request.
                @Code(name: "HomePresenter.swift", file: HomePresenter2.swift) 
            }
            
            @Step {
                Then we can create the authorization header and make the call inside of `refreshEvents`.
                
                And that's about it! 
                @Code(name: "HomePresenter.swift", file: HomePresenter3.swift) 
            }
            
            @Step {
                Let's go back to the view.
                @Code(name: "HomeView.swift", file: HomeView3.swift) {
                    @Image(source: "HomeView3.png", alt: "A view")
                }
            }
            
            @Step {
                First, we need to delete the mock data. Then, add an initialzer that takes in the access token so we can create the presenter. Next, we need to update the list initializer to use the presenter.
                
                To load the data, there is a `task` function on view that will execute when the view appears. Task is meant to call asynchronous functions and will cancel tasks if the view is dismissed automatically _(this is overhead that we would have to manage otherwise)_. 
                @Code(name: "HomeView.swift", file: HomeView7.swift) {
                    @Image(source: "HomeView5-8.png", alt: "A view")
                }
            }
            
            @Step {
                We will also call the same function from `refreshable`. Adding the refreshable function automatically adds the pull to refresh functionality to the list! üî•‚òùÔ∏è 
                
                You may have noticed in the [api documentation](https://github.com/JZDesign/LeanCoffeeService) that there are other endpoints _(a lot of them)_ that require the access token. Passing it around like this is probably not the right choice. Scroll down to the next section to learn about Dependency Injection in SwiftUI.
                @Code(name: "HomeView.swift", file: HomeView8-1.swift) {
                    @Image(source: "HomeView5-8.png", alt: "A view")
                }
            }
        }
    }
    
    @Section(title: "Dependency injection") {
        @ContentAndMedia {
            You've actually already seen and used different forms of Dependency Injection in this project. One is called [Constructor Injection](https://en.wikipedia.org/wiki/Dependency_injection#Constructor_injection), this is where we create a "client" object and pass in another "service" object the client _depends_ on to do its work. Take a look at the relationship between the `AsyncView` and the `Presenter`. This is a prime example of Constructor Injection. 
            
            The kind of Dependency Injection we're going to focus on here is referred to as [Setter Injection](https://en.wikipedia.org/wiki/Dependency_injection#Setter_injection). We tell the DI framework that we want something named X that has a desired interface, but we don't actually create the thing ourselves in the client object. Instead it is created outside of the usage site and injected when requested.
            
            Apple introduced native Setter Injection with SwiftUI! To prevent ourselves from passing around the access token to every new view/presenter we create, we'll use this feature.
            
            @Image(source: "swift.png", alt: "swift logo")
        }
        
        @Steps {
            @Step {
                Whenever we access an "Environment" variable or object, we're utilizing Swift's provided setter injection framework.
                
                We can create our own Environment variables like the `colorScheme`. Or we can create Environment Objects and pass them into the application explicitly. We'll start with the latter.
                @Code(name: "EnvironmentExample.swift", file: EnvironmentExample.swift)
            }
            
            @Step {
                First we're going to create our `TokenStore`. This will need to be an `ObservableObject`.
                @Code(name: "TokenStore.swift", file: TokenStore.swift)
            }
            
            
            @Step {
                Next, we need to find the app file.
                @Code(name: "LeanCoffeeiOSApp.swift", file: LeanCoffeeiOSApp1.swift)
            }
            
            @Step {
                Here, we initialize the `TokenStore` as a `@StateObject`, then we inject the object to the root level view using the `.enviornmentObject` view modifier.
                
                And that is all it takes to set up a dependency for injection! Now we need to use it.
                @Code(name: "LeanCoffeeiOSApp.swift", file: LeanCoffeeiOSApp2.swift)
            }
            
            @Step {
                Navigate to the `SignInPresenter`. This is the first place where the access token in used.
                @Code(name: "SignInPresenter.swift", file: SignInPresenter3.swift)
            }
            
            
            @Step {
                If we replace `accessToken` with the reference to our token store, and update the code where we assign the value, all seems to work fine. However, if you launch the application and try to sign in, you'll notice the app crash with an error message like the one you see on the upper right.
                
                [Turns out](https://stackoverflow.com/a/69238617/9333764) that doing dependency injection with an `@EnvironmentObject` is explicitly meant for SwiftUI views. Nothing else. We could move this into the SignInView and pass it to the presenter, but that's more ceremony than I'd like. We'll do it the other way.
                @Code(name: "SignInPresenter.swift", file: SignInPresenter4-crash.swift) {
                    @Image(source: "crash.png", alt: "A crash log")
                }
            }
            
            @Step {
                Before we go and create the keypath we need to set the token store as an environment variable, lets remove the token store references in the app file.
                @Code(name: "LeanCoffeeiOSApp.swift", file: LeanCoffeeiOSApp1.swift)
            }
            
            
            @Step {
                Then open up the `TokenStore` file again. We'll do the rest of the work here. 
                @Code(name: "TokenStore.swift", file: TokenStore.swift)
            }
            
            @Step {
                When we use the `colorScheme` environment variable, we locate it using a [key path](https://www.swiftbysundell.com/tips/passing-key-paths-as-functions/)
                
                This is done using an [environment key](https://developer.apple.com/documentation/swiftui/environmentkey). The first step is to create the key and its default value.
                @Code(name: "TokenStore.swift", file: TokenStore2.swift)
            }
            
            @Step {
                Then we need to register the token store to the key path on the environment. We do so by defining a custom getter that references the key path. Then a custom setter so we can modify the value at the injection site. 
                
                Additionally, like we injected the enviornment object in step 4, we can override the stored value at a specific usage site with the [`.environment`](https://developer.apple.com/documentation/swiftui/view/environment(_:_:)) view modifier. This allows us to inject a one off instance of an environment variable to a particular view if we need to.
                @Code(name: "TokenStore.swift", file: TokenStore3.swift)
            }
            
            @Step {
                Let's go back to the presenter so we can make the necessary changes.
                @Code(name: "SignInPresenter.swift", file: SignInPresenter4-nope.swift)
            }
            
            @Step {
                All we need to do here is change the injection point to the key path reference and we're done!
                
                If you try and sign in now, you should have no problems.
                @Code(name: "SignInPresenter.swift", file: SignInPresenter4.swift)
            }
            
            @Step {
                Now that we've got that working, lets go to the `HomePresenter` and inject the access token there.
                @Code(name: "HomePresenter.swift", file: HomePresenter3.swift)
            }
            
            @Step {
                Since the value is optional, we need to either unwrap the value and respond to it being nil, or provide a fallback value like we do here. 
                
                If you're up for the challenge, write a `guard` statement that throws an error if the access token is nil.
                @Code(name: "HomePresenter.swift", file: HomePresenter4.swift)
            }
            
            
            @Step {
                Next, we've got work to do in the HomeView.
                @Code(name: "HomeView.swift", file: HomeView8.swift)
            }
            
            @Step {
                Remove the initializer for and create the observed object presenter and we're done!
                
                Don't forget to go change the `SignInView` and `SignUpView` to present this view instead of that placeholder one.
                @Code(name: "HomeView.swift", file: HomeView9.swift)
            }
            
        }
    }
}
}
