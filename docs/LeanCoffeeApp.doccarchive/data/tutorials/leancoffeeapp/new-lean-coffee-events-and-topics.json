{"variants":[{"paths":["\/tutorials\/leancoffeeapp\/new-lean-coffee-events-and-topics"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this chapter we’ll finish implementing the application’s core functionality by allowing the user to create Lean Coffee events and their topics."}]}],"estimatedTimeInMinutes":45,"title":"Let there be Coffee","image":"coffee-beans.png","chapter":"Create New Events and Topics","kind":"hero","backgroundImage":"coffee-beans.png"},{"kind":"tasks","tasks":[{"anchor":"Form-Submissions","title":"Form Submissions","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a lightweight, reusable Form Submission Presenter to handle form validation before submitting data to the API"}]}],"mediaPosition":"trailing","media":"swift.png"}],"stepsSection":[{"code":"FormSubmissionPresenter1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We’ve created 2 forms in this application so far, the Sign in and Sign up forms, and we’re about to add 2 more. There are a couple of core behaviors of a form that I think can be easliy extracted in a new presenter. They are Validation and Submission. While this presenter won’t know how to handle the details of those things, it can provide a stable interface to the consuming views and establish a clear pattern throughout the application."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go ahead and make a new file named "},{"type":"codeVoice","code":"FormSubmissionPresenter.swift"},{"type":"text","text":" and add these 2 functions."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"FormSubmissionPresenter2.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Then we’ll include a third function. This is the function that will provide the stable interface to the views like I mentioned earlier. It does a few things:"}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"1. It validates the form or throws an error (you can do throw instead of return false when you override this later) 2. It handles concurrency and error handling by calling the perform function 3. It handles form submission."}]}]}],"type":"step","runtimePreview":null,"media":null},{"code":"FormSubmissionPresenter2-copy.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This will allow us to subclass this presenter and simply override the 2 internal functions to include form validation and do the work of submitting the data to the API."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Homework"}]},{"type":"text","text":" Go ahead and use this presenter for Sign in and Sign up in place of the standard "},{"type":"codeVoice","code":"Presenter"},{"type":"text","text":" and display meaningful errors to the user when the form is invalid."}]}],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Creating-a-Lean-Coffee","title":"Creating a Lean Coffee","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this section we’ll add a "},{"type":"codeVoice","code":"+"},{"type":"text","text":" button to the Home view and the form needed to create a new Lean Coffee event"}]}],"mediaPosition":"trailing","media":"swift.png"}],"stepsSection":[{"code":"CreateLeanCoffeePresenter.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This time we’ll start with the presenter. This presenter will submit data to the API to create a Lean Coffee. According to the "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/JZDesign\/LeanCoffeeService#create-lean-coffee"},{"type":"text","text":" all we really need to send is a title. So we’ll add the encodable model here while we’re at it."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"CreateLeanCoffeePresenter1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Then we’ll make sure we inherit from the new FormSubmissionPresenter and begin to override the functions. For now, we’ll override the form submission to make the call to the api."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"CreateLeanCoffeePresenter2.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And we’ll add some really simple form validation to make sure that there is some text present before we submit the form. You can add whatever validation here you’d prefer, even throw custom errors for you to display to the user if you’d like to."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"CreateLeanCoffeeView.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, we’ll create the view for this form. We’ll start with a stack and a title."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"CreateLeanCoffeeView1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Then the text field and the button."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"CreateLeanCoffeeView2.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And to acutally make the request, we’ll pass in the presenter."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you test this out, you’ll realize quickly that you don’t know if it finished the job or not. Let’s fix that."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"CreateLeanCoffeeView3.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"What we’ll do here is inject the presentation mode of the view. After the presenter finishes its work we’ll dismiss the view by “recieving” an event from the Presenter’s "},{"type":"codeVoice","code":"didFinish"},{"type":"text","text":" publisher and telling the presentation mode to dismiss."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now let’s go add this view to the navigation so we can truly use it."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"HomeView10.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open the "},{"type":"codeVoice","code":"HomeView.swift"},{"type":"text","text":" file. Here we’re going to add the standard "},{"type":"codeVoice","code":"+"},{"type":"text","text":" button that the user would expect."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"HomeView11.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Up top, we’ll create the "},{"type":"codeVoice","code":"+"},{"type":"text","text":" button as a "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/navigationlink"},{"type":"text","text":" that will automagically handle forward and backwards navigation for us."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"HomeView12.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Then in the body, we’ll need to reference that button to add it to the navigation bar. You’ll see a red "},{"type":"codeVoice","code":"+"},{"type":"text","text":" in the upper right hand corner of the app on the Home screen."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you use this as it is, you’ll notice that when you finish creating a new lean coffee, it’s not displayed on this view. Let’s fix that."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"HomeView13.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, we can add an "},{"type":"codeVoice","code":"onDisapear"},{"type":"text","text":" block on the "},{"type":"codeVoice","code":"CreateLeanCoffeeView"},{"type":"text","text":" to refresh the page after that view dismisses."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Creating-a-Topic","title":"Creating a Topic","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this section we’ll add a "},{"type":"codeVoice","code":"+"},{"type":"text","text":" button to the Lean Coffee view and the form needed to create a new Topic"}]}],"mediaPosition":"trailing","media":"swift.png"}],"stepsSection":[{"code":"CreateTopicPresenter.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This is going to seem nearly identical to the last section, which means you could probably do a nice refactor on this when it’s all said and done."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Again, we’ll start with the presenter. This presenter will submit data to the API to create a Topic. We’ll make the encodable body object according to the "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/JZDesign\/LeanCoffeeService#create-topic"},{"type":"text","text":". If you look closely, we need to include the Lean Coffee ID in the request to the api, so we’ll need to pass one into this presenter."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"CreateTopicPresenter1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Make sure we inherit from the new FormSubmissionPresenter and override the form submission to make the call to the api."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"CreateTopicPresenter2.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Again, we’ll add some really simple form validation to make sure that there is some text present before we submit the form."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"CreateTopicView.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, we’ll create the view for this form. We’ll start with a stack and a title."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"CreateTopicView1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Then the text fields and the button."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"CreateTopicView2.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And to acutally make the request, we’ll pass in the presenter."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"CreateTopicView3.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Then we’ll add the presentation mode so we can dismiss this view when the work is done."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now let’s go add this view to the navigation so we can truly use it."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"LeanCoffeeView14.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open the "},{"type":"codeVoice","code":"LeanCoffeeView.swift"},{"type":"text","text":" file. Here we’re going to add the standard "},{"type":"codeVoice","code":"+"},{"type":"text","text":" button that the user would expect."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"LeanCoffeeView15.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Up top, we’ll create the "},{"type":"codeVoice","code":"+"},{"type":"text","text":" button as a "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/navigationlink"},{"type":"text","text":" that will automagically handle forward and backwards navigation for us."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"LeanCoffeeView16.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Then in the body, we’ll need to reference that button to add it to the navigation bar. You’ll see a red "},{"type":"codeVoice","code":"+"},{"type":"text","text":" in the upper right hand corner of the app on the Home screen."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, we can add an "},{"type":"codeVoice","code":"onDisapear"},{"type":"text","text":" block on the "},{"type":"codeVoice","code":"CreateTopicView"},{"type":"text","text":" to refresh the page after that view dismisses."}]}],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"You-did-it!-🔥☝️","title":"You did it! 🔥☝️","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And that wraps up this tutorial series… "},{"type":"emphasis","inlineContent":[{"type":"text","text":"for now anyway."}]},{"type":"text","text":" There are many things we didn’t cover, like handling accessible font sizes on small screens, screen readers, or testing. All of which would impact how the app was architected."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you’re intrested in learning more about those topics before I get back to this tutorial and add these topics, reach out to me (Jacob Rakidzich) on Teams."}]}],"mediaPosition":"trailing","media":"memoji.png"}],"stepsSection":[]}]}],"identifier":{"url":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/New-Lean-Coffee-Events-and-Topics","interfaceLanguage":"swift"},"kind":"project","metadata":{"title":"Let there be Coffee","categoryPathComponent":"Tutorial-Table-of-Contents","role":"project","category":"Lean Coffee - iOS"},"hierarchy":{"modules":[{"reference":"doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents\/Getting-started-with-SwiftUI","projects":[{"reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Getting-Started","sections":[{"kind":"task","reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Getting-Started#Your-first-SwiftUI-View"}]}]},{"reference":"doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents\/Authentication","projects":[{"reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Sign-in-and-Sign-up","sections":[{"kind":"task","reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Sign-in-and-Sign-up#Creating-the-Sign-in-View"},{"kind":"task","reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Sign-in-and-Sign-up#Creating-the-Sign-Up-View"}]}]},{"reference":"doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents\/The-Presenter-Pattern","projects":[{"reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Presenter","sections":[{"kind":"task","reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Presenter#A-basic-Presenter"},{"kind":"task","reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Presenter#The-Sign-In-Presenter"}]}]},{"reference":"doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents\/Loading-and-Errors","projects":[{"reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Loading-and-Errors","sections":[{"kind":"task","reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Loading-and-Errors#A-Loading-View"},{"kind":"task","reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Loading-and-Errors#The-AsyncView"}]}]},{"reference":"doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents\/Lists-and-Dependencies","projects":[{"reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/List-View","sections":[{"kind":"task","reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/List-View#A-laundry-list-of-things-to-do."},{"kind":"task","reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/List-View#Dependency-injection"}]}]},{"reference":"doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents\/In-the-Topics","projects":[{"reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Lean-Coffee-Topics","sections":[{"kind":"task","reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Lean-Coffee-Topics#Creating-the-Lean-Coffee-View"},{"kind":"task","reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Lean-Coffee-Topics#Creating-the-Lean-Coffee-Presenter"}]}]},{"reference":"doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents\/Create-New-Events-and-Topics","projects":[{"reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/New-Lean-Coffee-Events-and-Topics","sections":[{"kind":"task","reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/New-Lean-Coffee-Events-and-Topics#Form-Submissions"},{"kind":"task","reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/New-Lean-Coffee-Events-and-Topics#Creating-a-Lean-Coffee"},{"kind":"task","reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/New-Lean-Coffee-Events-and-Topics#Creating-a-Topic"},{"kind":"task","reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/New-Lean-Coffee-Events-and-Topics#You-did-it!-%F0%9F%94%A5%E2%98%9D%EF%B8%8F"}]}]}],"reference":"doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents","paths":[["doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents","doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents\/$volume","doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents\/Create-New-Events-and-Topics"]]},"references":{"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/Getting-Started#Your-first-SwiftUI-View":{"role":"pseudoSymbol","title":"Your first SwiftUI View","abstract":[{"type":"text","text":"Create the landing page of the Lean Coffee application supporting iPhone, iPad, and darkmode."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Getting-Started#Your-first-SwiftUI-View","kind":"section","type":"section","url":"\/tutorials\/leancoffeeapp\/getting-started#Your-first-SwiftUI-View"},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/New-Lean-Coffee-Events-and-Topics#Form-Submissions":{"role":"pseudoSymbol","title":"Form Submissions","abstract":[{"type":"text","text":"In this chapter we’ll finish implementing the application’s core functionality by allowing the user to create Lean Coffee events and their topics."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/New-Lean-Coffee-Events-and-Topics#Form-Submissions","kind":"section","type":"section","url":"\/tutorials\/leancoffeeapp\/new-lean-coffee-events-and-topics#Form-Submissions"},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/Sign-in-and-Sign-up#Creating-the-Sign-Up-View":{"role":"pseudoSymbol","title":"Creating the Sign Up View","abstract":[{"type":"text","text":"Use the view from Chapter 1 to present a Sign in or Sign up form and log a user into the application."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Sign-in-and-Sign-up#Creating-the-Sign-Up-View","kind":"section","type":"section","url":"\/tutorials\/leancoffeeapp\/sign-in-and-sign-up#Creating-the-Sign-Up-View"},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/Sign-in-and-Sign-up#Creating-the-Sign-in-View":{"role":"pseudoSymbol","title":"Creating the Sign in View","abstract":[{"type":"text","text":"Use the view from Chapter 1 to present a Sign in or Sign up form and log a user into the application."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Sign-in-and-Sign-up#Creating-the-Sign-in-View","kind":"section","type":"section","url":"\/tutorials\/leancoffeeapp\/sign-in-and-sign-up#Creating-the-Sign-in-View"},"memoji.png":{"alt":"Jacob Rakidzich's Memoji","type":"image","identifier":"memoji.png","variants":[{"url":"\/images\/memoji.png","traits":["1x","light"]}]},"CreateLeanCoffeePresenter1.swift":{"syntax":"swift","content":["import SwiftUI","","class CreateLeanCoffeePresenter: FormSubmissionPresenter {","","    @Published var title = \"\"","","    override func submitForm() async throws {","        try await AuthorizedHttpClient()","            .post(","                body: CreateLeanCoffee(title: self.title),","                url: rootURL + \"\/leancoffee\"","            )","    }","}","","struct CreateLeanCoffee: Codable {","    let title: String","}"],"fileName":"CreateLeanCoffeePresenter.swift","identifier":"CreateLeanCoffeePresenter1.swift","type":"file","fileType":"swift","highlights":[{"line":3},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13}]},"CreateLeanCoffeeView3.swift":{"syntax":"swift","content":["import SwiftUI","","struct CreateLeanCoffeeView: View {","    ","    @ObservedObject var presenter = CreateLeanCoffeePresenter()","    @Environment(\\.presentationMode) var presentation","    ","    var body: some View {","        VStack {","            ","            Text(\"Create a new Lean Coffee Event\")","                .font(.title).fontWeight(.black)","                .padding(.bottom, 24)","            ","            TextField(\"Lean Coffee title\", text: $presenter.title, prompt: Text(\"Lean Coffee title\"))","            ","            Spacer()","            ","            BoldButton(\"Submit\") { presenter.handleFormSubmission() }","","        }","        .padding()","        .toAsyncView(presenter)","        .onReceive(presenter.$didFinish) {","            if $0 {","                presentation.wrappedValue.dismiss()","            }","        }","    }","}"],"fileName":"CreateLeanCoffeeView.swift","identifier":"CreateLeanCoffeeView3.swift","type":"file","fileType":"swift","highlights":[{"line":6},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28}]},"CreateTopicView3.swift":{"syntax":"swift","content":["import SwiftUI","","struct CreateTopicView: View {","    @ObservedObject var presenter: CreateTopicPresenter","    @Environment(\\.presentationMode) var presentation","    ","    init(_ leanCoffee: LeanCoffee) {","        self.presenter = CreateTopicPresenter(leanCoffee)","    }","","    var body: some View {","        VStack {","            Text(\"Create a new topic to discuss\")","                .font(.title).fontWeight(.black)","                .padding(.bottom, 24)","            ","            TextField(\"Topic title\", text: $presenter.title, prompt: Text(\"Topic title\"))","            ","            TextField(\"Description\", text: $presenter.description, prompt: Text(\"Description\"))","            ","            Spacer()","            ","            BoldButton(\"Submit\") { presenter.handleFormSubmission() }","            ","        }","        .padding()","        .toAsyncView(presenter)","        .onReceive(presenter.$didFinish) {","            if $0 {","                presentation.wrappedValue.dismiss()","            }","        }","    }","}"],"fileName":"CreateTopicView.swift","identifier":"CreateTopicView3.swift","type":"file","fileType":"swift","highlights":[{"line":5},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32}]},"doc://LeanCoffeeApp/tutorials/Tutorial-Table-of-Contents/Create-New-Events-and-Topics":{"role":"article","title":"Create New Events and Topics","abstract":[],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents\/Create-New-Events-and-Topics","kind":"article","type":"topic","url":"\/tutorials\/tutorial-table-of-contents\/create-new-events-and-topics"},"doc://LeanCoffeeApp/tutorials/Tutorial-Table-of-Contents/In-the-Topics":{"role":"article","title":"In the Topics","abstract":[],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents\/In-the-Topics","kind":"article","type":"topic","url":"\/tutorials\/tutorial-table-of-contents\/in-the-topics"},"FormSubmissionPresenter1.swift":{"syntax":"swift","content":["import SwiftUI","","class FormSubmissionPresenter: Presenter {","    ","    internal func formValidated() throws -> Bool {","        true \/\/ Override this function if you want to stop the button from working when a form is not correctly filled out","    }","    ","    internal func submitForm() async throws {","        fatalError(\"This must be overridden\")","    }","}"],"fileName":"FormSubmissionPresenter.swift","identifier":"FormSubmissionPresenter1.swift","type":"file","fileType":"swift","highlights":[]},"CreateTopicPresenter.swift":{"syntax":"swift","content":["import SwiftUI","","class CreateTopicPresenter: Presenter {","    ","    let leanCoffee: LeanCoffee","    ","    @Published var title = \"\"","    @Published var description = \"\"","    ","    init(_ leanCoffee: LeanCoffee) {","        self.leanCoffee = leanCoffee","    }","}","","struct CreateTopic: Codable {","    let title: String","    let description: String","    let leanCoffeeId: String","}"],"fileName":"CreateTopicPresenter.swift","identifier":"CreateTopicPresenter.swift","type":"file","fileType":"swift","highlights":[]},"CreateTopicView.swift":{"syntax":"swift","content":["import SwiftUI","","struct CreateTopicView: View {","    @State var title = \"\"","    @State var description = \"\"","","    var body: some View {","        VStack {","            Text(\"Create a new topic to discuss\")","                .font(.title).fontWeight(.black)","                .padding(.bottom, 24)","        }","        .padding()","    }","}"],"fileName":"CreateTopicView.swift","identifier":"CreateTopicView.swift","type":"file","fileType":"swift","highlights":[]},"CreateLeanCoffeeView2.swift":{"syntax":"swift","content":["import SwiftUI","","struct CreateLeanCoffeeView: View {","    ","    @ObservedObject var presenter = CreateLeanCoffeePresenter()","    ","    var body: some View {","        VStack {","            ","            Text(\"Create a new Lean Coffee Event\")","                .font(.title).fontWeight(.black)","                .padding(.bottom, 24)","            ","            TextField(\"Lean Coffee title\", text: $presenter.title, prompt: Text(\"Lean Coffee title\"))","            ","            Spacer()","            ","            BoldButton(\"Submit\") { presenter.handleFormSubmission() }","","        }","        .padding()","        .toAsyncView(presenter)","    }","}"],"fileName":"CreateLeanCoffeeView.swift","identifier":"CreateLeanCoffeeView2.swift","type":"file","fileType":"swift","highlights":[{"line":5},{"line":14},{"line":18},{"line":19},{"line":22}]},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/Presenter#A-basic-Presenter":{"role":"pseudoSymbol","title":"A basic Presenter","abstract":[{"type":"text","text":"In this chapter we’ll refactor the Sign in and Sign up views to use the Presenter pattern. This will allow us to reuse some of the code, and pull the business logic out of the view."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Presenter#A-basic-Presenter","kind":"section","type":"section","url":"\/tutorials\/leancoffeeapp\/presenter#A-basic-Presenter"},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/New-Lean-Coffee-Events-and-Topics#Creating-a-Topic":{"role":"pseudoSymbol","title":"Creating a Topic","abstract":[{"type":"text","text":"In this chapter we’ll finish implementing the application’s core functionality by allowing the user to create Lean Coffee events and their topics."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/New-Lean-Coffee-Events-and-Topics#Creating-a-Topic","kind":"section","type":"section","url":"\/tutorials\/leancoffeeapp\/new-lean-coffee-events-and-topics#Creating-a-Topic"},"HomeView12.swift":{"syntax":"swift","content":["import SwiftUI","","struct HomeView: View {","","    @ObservedObject var presenter = HomePresenter()","","    var addLeanCoffeeButton: some View {","        NavigationLink(destination: {","            CreateLeanCoffeeView()","        }) {","            Image(systemName: \"plus\")","        }","    }","","    var body: some View {","        NavigationView {","            List(presenter.events) { leanCoffee in","                NavigationLink(destination: {","                    LeanCoffeeView(presenter: LeanCoffeePresenter(leanCoffee))","                }) {","                    Text(leanCoffee.title)","                }","            }","            .navigationBarItems(trailing: addLeanCoffeeButton)","            .navigationTitle(Text(\"Lean Coffee\"))","        }","        .task {","            await presenter.refreshEvents()","        }","        .refreshable {","            await presenter.refreshEvents()","        }","    }","}"],"fileName":"HomeView.swift","identifier":"HomeView12.swift","type":"file","fileType":"swift","highlights":[{"line":24},{"line":25}]},"coffee-beans.png":{"alt":"Coffee Beans","type":"image","identifier":"coffee-beans.png","variants":[{"url":"\/images\/coffee-beans.png","traits":["1x","light"]}]},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/Lean-Coffee-Topics":{"role":"project","title":"The Lean Coffee View","estimatedTime":"1hr 0min","abstract":[{"type":"text","text":"Learn how to crate custom list rows with swipe actions, sorting, and more."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Lean-Coffee-Topics","kind":"project","type":"topic","url":"\/tutorials\/leancoffeeapp\/lean-coffee-topics"},"CreateLeanCoffeePresenter2.swift":{"syntax":"swift","content":["import SwiftUI","","class CreateLeanCoffeePresenter: FormSubmissionPresenter {","","    @Published var title = \"\"","","    override func formValidated() throws -> Bool {","        title.count > 0","    }","    ","    override func submitForm() async throws {","        try await AuthorizedHttpClient()","            .post(","                body: CreateLeanCoffee(title: self.title),","                url: rootURL + \"\/leancoffee\"","            )","    }","}","","struct CreateLeanCoffee: Codable {","    let title: String","}"],"fileName":"CreateLeanCoffeePresenter.swift","identifier":"CreateLeanCoffeePresenter2.swift","type":"file","fileType":"swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":10}]},"HomeView10.swift":{"syntax":"swift","content":["import SwiftUI","","struct HomeView: View {","    ","    @ObservedObject var presenter = HomePresenter()","","    var body: some View {","        NavigationView {","            List(presenter.events) { leanCoffee in","                NavigationLink(destination: {","                    LeanCoffeeView(presenter: LeanCoffeePresenter(leanCoffee))","                }) {","                    Text(leanCoffee.title)","                }","            }.navigationTitle(Text(\"Lean Coffee\"))","        }","        .toAsyncView(presenter)","        .task {","            await presenter.refreshEvents()","        }","        .refreshable {","            await presenter.refreshEvents()","        }","    }","}"],"fileName":"HomeView.swift","identifier":"HomeView10.swift","type":"file","fileType":"swift","highlights":[]},"LeanCoffeeView15.swift":{"syntax":"swift","content":["import SwiftUI","","struct LeanCoffeeView: View {","    @ObservedObject var presenter: LeanCoffeePresenter","    ","    ","    var addTopicButton: some View {","        NavigationLink(destination: {","            CreateTopicView(presenter.leanCoffee)","        }) {","            Image(systemName: \"plus\")","        }","    }","    ","    ","    @ViewBuilder func badge(for topic: Topic) -> some View {","        if topic.completed {","            Image(systemName: \"checkmark\")","                .frame(minWidth: 30, minHeight: 30)","                .background(Color.green.cornerRadius(.greatestFiniteMagnitude))","        } else {","            Text(\"\\(topic.votes.count)\")","                .frame(minWidth: 30, minHeight: 30)","                .background(Color.brown.cornerRadius(.greatestFiniteMagnitude))","        }","    }","    ","    ","    @ViewBuilder func swipeActions(for topic: Topic) -> some View {","        if topic.completed {","            EmptyView() \/\/ If the topic is complete, there is no need to swipe","        } else {","            \/\/ The first button will trigger automatically on a full swipe","            Button(action: { presenter.voteAndReload(forTopic: topic) }){","                Image(systemName: \"hand.thumbsup.fill\")","            }.tint(.green)","            ","            Button(action: { presenter.completeAndReload(forTopic: topic) })","            {","                Image(systemName: \"checkmark\")","            }.tint(Color.red)","        }","    }","    ","    ","    @ViewBuilder func listRow(for topic: Topic) -> some View {","        HStack {","            Spacer()","            ","            badge(for: topic)","                .font(.headline.bold())","                .foregroundColor(.white)","                .padding(.bottom)","            ","            Spacer()","        }","        ","        Text(topic.title)","            .font(.headline)","            .multilineTextAlignment(.center)","        ","        Text(topic.description)","            .font(.subheadline)","            .padding(.bottom)","            .lineLimit(6)","    }","    ","    ","    func errorMessageProvider(_ error: Error?) -> String? {","        switch error as? HTTPClientError {","        case .requestError(let code, _, _):","            if code == 409 {","                return \"You've already voted on this topic!\"","            }","        default: return nil","        }","        ","        return nil","    }","    ","    ","    var body: some View {","        ","        Text(presenter.leanCoffee.title)","            .padding(.horizontal)","            .multilineTextAlignment(.center)","            .lineLimit(2)","        ","        List(presenter.topics) { topic in","            VStack(spacing: 16) {","                listRow(for: topic)","            }","            .padding(.vertical)","            .navigationTitle(Text(\"Topics\"))","            .swipeActions(edge: .trailing) { swipeActions(for: topic) }","        }","        .task {","            await presenter.getAllTopics()","        }","        .refreshable {","            await presenter.getAllTopics()","        }","        .toAsyncView(presenter, errorMessageProvider: errorMessageProvider)","    }","}"],"fileName":"LeanCoffeeView.swift","identifier":"LeanCoffeeView15.swift","type":"file","fileType":"swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15}]},"HomeView13.swift":{"syntax":"swift","content":["import SwiftUI","","struct HomeView: View {","","    @ObservedObject var presenter = HomePresenter()","","    var addLeanCoffeeButton: some View {","        NavigationLink(destination: {","            CreateLeanCoffeeView()","                .onDisappear { \/\/ to ensure the presenting view stays up to date","                    Task {","                        await presenter.refreshEvents()","                    }","                }","        }) {","            Image(systemName: \"plus\")","        }","    }","","    var body: some View {","        NavigationView {","            List(presenter.events) { leanCoffee in","                NavigationLink(destination: {","                    LeanCoffeeView(presenter: LeanCoffeePresenter(leanCoffee))","                }) {","                    Text(leanCoffee.title)","                }","            }","            .navigationBarItems(trailing: addLeanCoffeeButton)","            .navigationTitle(Text(\"Lean Coffee\"))","        }","        .task {","            await presenter.refreshEvents()","        }","        .refreshable {","            await presenter.refreshEvents()","        }","    }","}"],"fileName":"HomeView.swift","identifier":"HomeView13.swift","type":"file","fileType":"swift","highlights":[{"line":10},{"line":11},{"line":12},{"line":13},{"line":14}]},"FormSubmissionPresenter2.swift":{"syntax":"swift","content":["import SwiftUI","","class FormSubmissionPresenter: Presenter {","    ","    func handleFormSubmission() {","        ","        Task {","            await perform {","                guard try self.formValidated() else {","                    return","                }","                try await self.submitForm()","                self.didFinish = true","            }","        }","    }","","    internal func formValidated() throws -> Bool {","        true \/\/ Override this function if you want to stop the button from working when a form is not correctly filled out","    }","    ","    internal func submitForm() async throws {","        fatalError(\"This must be overridden\")","    }","}"],"fileName":"FormSubmissionPresenter.swift","identifier":"FormSubmissionPresenter2.swift","type":"file","fileType":"swift","highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17}]},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/Lean-Coffee-Topics#Creating-the-Lean-Coffee-View":{"role":"pseudoSymbol","title":"Creating the Lean Coffee View","abstract":[{"type":"text","text":"Learn how to crate custom list rows with swipe actions, sorting, and more."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Lean-Coffee-Topics#Creating-the-Lean-Coffee-View","kind":"section","type":"section","url":"\/tutorials\/leancoffeeapp\/lean-coffee-topics#Creating-the-Lean-Coffee-View"},"CreateTopicPresenter1.swift":{"syntax":"swift","content":["import SwiftUI","","class CreateTopicPresenter: FormSubmissionPresenter {","    ","    let leanCoffee: LeanCoffee","    ","    @Published var title = \"\"","    @Published var description = \"\"","    ","    init(_ leanCoffee: LeanCoffee) {","        self.leanCoffee = leanCoffee","    }","","    override func submitForm() async throws {","        try await AuthorizedHttpClient()","            .post(","                body: CreateTopic(","                    title: self.title,","                    description: self.description,","                    leanCoffeeId: self.leanCoffee.id","                ),","                url: rootURL + \"\/topics\"","            )","    }","}","","struct CreateTopic: Codable {","    let title: String","    let description: String","    let leanCoffeeId: String","}"],"fileName":"CreateTopicPresenter.swift","identifier":"CreateTopicPresenter1.swift","type":"file","fileType":"swift","highlights":[{"line":3},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24}]},"HomeView11.swift":{"syntax":"swift","content":["import SwiftUI","","struct HomeView: View {","","    @ObservedObject var presenter = HomePresenter()","","    var addLeanCoffeeButton: some View {","        NavigationLink(destination: {","            CreateLeanCoffeeView()","        }) {","            Image(systemName: \"plus\")","        }","    }","","    var body: some View {","        NavigationView {","            List(presenter.events) { leanCoffee in","                NavigationLink(destination: {","                    LeanCoffeeView(presenter: LeanCoffeePresenter(leanCoffee))","                }) {","                    Text(leanCoffee.title)","                }","            }","        }","        .task {","            await presenter.refreshEvents()","        }","        .refreshable {","            await presenter.refreshEvents()","        }","    }","}"],"fileName":"HomeView.swift","identifier":"HomeView11.swift","type":"file","fileType":"swift","highlights":[{"line":4},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":23}]},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/New-Lean-Coffee-Events-and-Topics#Creating-a-Lean-Coffee":{"role":"pseudoSymbol","title":"Creating a Lean Coffee","abstract":[{"type":"text","text":"In this chapter we’ll finish implementing the application’s core functionality by allowing the user to create Lean Coffee events and their topics."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/New-Lean-Coffee-Events-and-Topics#Creating-a-Lean-Coffee","kind":"section","type":"section","url":"\/tutorials\/leancoffeeapp\/new-lean-coffee-events-and-topics#Creating-a-Lean-Coffee"},"CreateTopicView1.swift":{"syntax":"swift","content":["import SwiftUI","","struct CreateTopicView: View {","    @State var title = \"\"","    @State var description = \"\"","","    var body: some View {","        VStack {","            Text(\"Create a new topic to discuss\")","                .font(.title).fontWeight(.black)","                .padding(.bottom, 24)","","            TextField(\"Topic title\", text: $title, prompt: Text(\"Topic title\"))","","            TextField(\"Description\", text: $description, prompt: Text(\"Description\"))","","            Spacer()","","            BoldButton(\"Submit\") { }","","        }","        .padding()","    }","}"],"fileName":"CreateTopicView.swift","identifier":"CreateTopicView1.swift","type":"file","fileType":"swift","highlights":[{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20}]},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/New-Lean-Coffee-Events-and-Topics":{"role":"project","title":"Let there be Coffee","estimatedTime":"45min","abstract":[{"type":"text","text":"In this chapter we’ll finish implementing the application’s core functionality by allowing the user to create Lean Coffee events and their topics."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/New-Lean-Coffee-Events-and-Topics","kind":"project","type":"topic","url":"\/tutorials\/leancoffeeapp\/new-lean-coffee-events-and-topics"},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/Loading-and-Errors":{"role":"project","title":"Loading and Errors","estimatedTime":"25min","abstract":[{"type":"text","text":"There’s nothing worse than an app that doesn’t show loading states or errors…"}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Loading-and-Errors","kind":"project","type":"topic","url":"\/tutorials\/leancoffeeapp\/loading-and-errors"},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/List-View":{"role":"project","title":"Create the List View and understand Swift's flavor of Dependency Injection","estimatedTime":"35min","abstract":[{"type":"text","text":"Create the list view of all the Lean Coffee Events and learn about Dependency Injection with SwiftUI."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/List-View","kind":"project","type":"topic","url":"\/tutorials\/leancoffeeapp\/list-view"},"CreateLeanCoffeeView1.swift":{"syntax":"swift","content":["import SwiftUI","","struct CreateLeanCoffeeView: View {","    ","    @State var title = \"\"","    ","    var body: some View {","        VStack {","            ","            Text(\"Create a new Lean Coffee Event\")","                .font(.title).fontWeight(.black)","                .padding(.bottom, 24)","            ","            TextField(\"Lean Coffee title\", text: $title, prompt: Text(\"Lean Coffee title\"))","            ","            Spacer()","            ","            BoldButton(\"Submit\") {}","            ","        }","        .padding()","    }","}"],"fileName":"CreateLeanCoffeeView.swift","identifier":"CreateLeanCoffeeView1.swift","type":"file","fileType":"swift","highlights":[{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19}]},"doc://LeanCoffeeApp/tutorials/Tutorial-Table-of-Contents/The-Presenter-Pattern":{"role":"article","title":"The Presenter Pattern","abstract":[],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents\/The-Presenter-Pattern","kind":"article","type":"topic","url":"\/tutorials\/tutorial-table-of-contents\/the-presenter-pattern"},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/New-Lean-Coffee-Events-and-Topics#You-did-it!-%F0%9F%94%A5%E2%98%9D%EF%B8%8F":{"role":"pseudoSymbol","title":"You did it! 🔥☝️","abstract":[{"type":"text","text":"In this chapter we’ll finish implementing the application’s core functionality by allowing the user to create Lean Coffee events and their topics."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/New-Lean-Coffee-Events-and-Topics#You-did-it!-%F0%9F%94%A5%E2%98%9D%EF%B8%8F","kind":"section","type":"section","url":"\/tutorials\/leancoffeeapp\/new-lean-coffee-events-and-topics#You-did-it!-%25F0%259F%2594%25A5%25E2%2598%259D%25EF%25B8%258F"},"https://github.com/JZDesign/LeanCoffeeService#create-topic":{"title":"docs","titleInlineContent":[{"type":"text","text":"docs"}],"type":"link","identifier":"https:\/\/github.com\/JZDesign\/LeanCoffeeService#create-topic","url":"https:\/\/github.com\/JZDesign\/LeanCoffeeService#create-topic"},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/Sign-in-and-Sign-up":{"role":"project","title":"Sign in and Sign up","estimatedTime":"20min","abstract":[{"type":"text","text":"Use the view from Chapter 1 to present a Sign in or Sign up form and log a user into the application."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Sign-in-and-Sign-up","kind":"project","type":"topic","url":"\/tutorials\/leancoffeeapp\/sign-in-and-sign-up"},"swift.png":{"alt":"swift logo","type":"image","identifier":"swift.png","variants":[{"url":"\/images\/swift.png","traits":["1x","light"]}]},"CreateLeanCoffeePresenter.swift":{"syntax":"swift","content":["import SwiftUI","","class CreateLeanCoffeePresenter: Presenter {","","    @Published var title = \"\"","","}","","struct CreateLeanCoffee: Codable {","    let title: String","}"],"fileName":"CreateLeanCoffeePresenter.swift","identifier":"CreateLeanCoffeePresenter.swift","type":"file","fileType":"swift","highlights":[]},"LeanCoffeeView16.swift":{"syntax":"swift","content":["import SwiftUI","","struct LeanCoffeeView: View {","    @ObservedObject var presenter: LeanCoffeePresenter","    ","    var addTopicButton: some View {","        NavigationLink(destination: {","            CreateTopicView(presenter.leanCoffee)","                .onDisappear {","                    Task {","                        await presenter.getAllTopics()","                    }","                }","        }) {","            Image(systemName: \"plus\")","        }","    }","    ","    ","    @ViewBuilder func badge(for topic: Topic) -> some View {","        if topic.completed {","            Image(systemName: \"checkmark\")","                .frame(minWidth: 30, minHeight: 30)","                .background(Color.green.cornerRadius(.greatestFiniteMagnitude))","        } else {","            Text(\"\\(topic.votes.count)\")","                .frame(minWidth: 30, minHeight: 30)","                .background(Color.brown.cornerRadius(.greatestFiniteMagnitude))","        }","    }","    ","    ","    @ViewBuilder func swipeActions(for topic: Topic) -> some View {","        if topic.completed {","            EmptyView() \/\/ If the topic is complete, there is no need to swipe","        } else {","            \/\/ The first button will trigger automatically on a full swipe","            Button(action: { presenter.voteAndReload(forTopic: topic) }){","                Image(systemName: \"hand.thumbsup.fill\")","            }.tint(.green)","            ","            Button(action: { presenter.completeAndReload(forTopic: topic) })","            {","                Image(systemName: \"checkmark\")","            }.tint(Color.red)","        }","    }","    ","    ","    @ViewBuilder func listRow(for topic: Topic) -> some View {","        HStack {","            Spacer()","            ","            badge(for: topic)","                .font(.headline.bold())","                .foregroundColor(.white)","                .padding(.bottom)","            ","            Spacer()","        }","        ","        Text(topic.title)","            .font(.headline)","            .multilineTextAlignment(.center)","        ","        Text(topic.description)","            .font(.subheadline)","            .padding(.bottom)","            .lineLimit(6)","    }","    ","    ","    func errorMessageProvider(_ error: Error?) -> String? {","        switch error as? HTTPClientError {","        case .requestError(let code, _, _):","            if code == 409 {","                return \"You've already voted on this topic!\"","            }","        default: return nil","        }","        ","        return nil","    }","    ","    ","    var body: some View {","        ","        Text(presenter.leanCoffee.title)","            .padding(.horizontal)","            .multilineTextAlignment(.center)","            .lineLimit(2)","            .navigationBarItems(trailing: addTopicButton)","        ","        List(presenter.topics) { topic in","            VStack(spacing: 16) {","                listRow(for: topic)","            }","            .padding(.vertical)","            .navigationTitle(Text(\"Topics\"))","            .swipeActions(edge: .trailing) { swipeActions(for: topic) }","        }","        .task {","            await presenter.getAllTopics()","        }","        .refreshable {","            await presenter.getAllTopics()","        }","        .toAsyncView(presenter, errorMessageProvider: errorMessageProvider)","    }","}"],"fileName":"LeanCoffeeView.swift","identifier":"LeanCoffeeView16.swift","type":"file","fileType":"swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":92}]},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/Lean-Coffee-Topics#Creating-the-Lean-Coffee-Presenter":{"role":"pseudoSymbol","title":"Creating the Lean Coffee Presenter","abstract":[{"type":"text","text":"Learn how to crate custom list rows with swipe actions, sorting, and more."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Lean-Coffee-Topics#Creating-the-Lean-Coffee-Presenter","kind":"section","type":"section","url":"\/tutorials\/leancoffeeapp\/lean-coffee-topics#Creating-the-Lean-Coffee-Presenter"},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/Getting-Started":{"role":"project","title":"Your first SwiftUI View","estimatedTime":"15min","abstract":[{"type":"text","text":"Create the landing page of the Lean Coffee application supporting iPhone, iPad, and darkmode."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Getting-Started","kind":"project","type":"topic","url":"\/tutorials\/leancoffeeapp\/getting-started"},"doc://LeanCoffeeApp/tutorials/Tutorial-Table-of-Contents/Loading-and-Errors":{"role":"article","title":"Loading and Errors","abstract":[],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents\/Loading-and-Errors","kind":"article","type":"topic","url":"\/tutorials\/tutorial-table-of-contents\/loading-and-errors"},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/Presenter":{"role":"project","title":"The Presenter Pattern","estimatedTime":"35min","abstract":[{"type":"text","text":"In this chapter we’ll refactor the Sign in and Sign up views to use the Presenter pattern. This will allow us to reuse some of the code, and pull the business logic out of the view."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Presenter","kind":"project","type":"topic","url":"\/tutorials\/leancoffeeapp\/presenter"},"doc://LeanCoffeeApp/tutorials/Tutorial-Table-of-Contents/Getting-started-with-SwiftUI":{"role":"article","title":"Getting started with SwiftUI","abstract":[],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents\/Getting-started-with-SwiftUI","kind":"article","type":"topic","url":"\/tutorials\/tutorial-table-of-contents\/getting-started-with-swiftui"},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/List-View#Dependency-injection":{"role":"pseudoSymbol","title":"Dependency injection","abstract":[{"type":"text","text":"Create the list view of all the Lean Coffee Events and learn about Dependency Injection with SwiftUI."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/List-View#Dependency-injection","kind":"section","type":"section","url":"\/tutorials\/leancoffeeapp\/list-view#Dependency-injection"},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/Loading-and-Errors#The-AsyncView":{"role":"pseudoSymbol","title":"The AsyncView","abstract":[{"type":"text","text":"There’s nothing worse than an app that doesn’t show loading states or errors…"}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Loading-and-Errors#The-AsyncView","kind":"section","type":"section","url":"\/tutorials\/leancoffeeapp\/loading-and-errors#The-AsyncView"},"CreateLeanCoffeeView.swift":{"syntax":"swift","content":["import SwiftUI","","struct CreateLeanCoffeeView: View {","    ","    @State var title = \"\"","    ","    var body: some View {","        VStack {","            ","            Text(\"Create a new Lean Coffee Event\")","                .font(.title).fontWeight(.black)","                .padding(.bottom, 24)","            ","        }","        .padding()","    }","}"],"fileName":"CreateLeanCoffeeView.swift","identifier":"CreateLeanCoffeeView.swift","type":"file","fileType":"swift","highlights":[]},"FormSubmissionPresenter2-copy.swift":{"syntax":"swift","content":["import SwiftUI","","class FormSubmissionPresenter: Presenter {","    ","    func handleFormSubmission() {","        ","        Task {","            await perform {","                guard try self.formValidated() else {","                    return","                }","                try await self.submitForm()","                self.didFinish = true","            }","        }","    }","","    internal func formValidated() throws -> Bool {","        true \/\/ Override this function if you want to stop the button from working when a form is not correctly filled out","    }","    ","    internal func submitForm() async throws {","        fatalError(\"This must be overridden\")","    }","}"],"fileName":"FormSubmissionPresenter.swift","identifier":"FormSubmissionPresenter2-copy.swift","type":"file","fileType":"swift","highlights":[]},"doc://LeanCoffeeApp/tutorials/Tutorial-Table-of-Contents/Authentication":{"role":"article","title":"Authentication","abstract":[],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents\/Authentication","kind":"article","type":"topic","url":"\/tutorials\/tutorial-table-of-contents\/authentication"},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/List-View#A-laundry-list-of-things-to-do.":{"role":"pseudoSymbol","title":"A laundry list of things to do.","abstract":[{"type":"text","text":"Create the list view of all the Lean Coffee Events and learn about Dependency Injection with SwiftUI."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/List-View#A-laundry-list-of-things-to-do.","kind":"section","type":"section","url":"\/tutorials\/leancoffeeapp\/list-view#A-laundry-list-of-things-to-do."},"CreateTopicPresenter2.swift":{"syntax":"swift","content":["import SwiftUI","","class CreateTopicPresenter: FormSubmissionPresenter {","    ","    let leanCoffee: LeanCoffee","    ","    @Published var title = \"\"","    @Published var description = \"\"","    ","    init(_ leanCoffee: LeanCoffee) {","        self.leanCoffee = leanCoffee","    }","    ","    override func formValidated() throws -> Bool {","        title.count > 0 && description.count > 0","    }","    ","    override func submitForm() async throws {","        try await AuthorizedHttpClient()","            .post(","                body: CreateTopic(","                    title: self.title,","                    description: self.description,","                    leanCoffeeId: self.leanCoffee.id","                ),","                url: rootURL + \"\/topics\"","            )","    }","}","","struct CreateTopic: Codable {","    let title: String","    let description: String","    let leanCoffeeId: String","}"],"fileName":"CreateTopicPresenter.swift","identifier":"CreateTopicPresenter2.swift","type":"file","fileType":"swift","highlights":[{"line":13},{"line":14},{"line":15},{"line":16},{"line":17}]},"CreateTopicView2.swift":{"syntax":"swift","content":["import SwiftUI","","struct CreateTopicView: View {","    @ObservedObject var presenter: CreateTopicPresenter","    ","    init(_ leanCoffee: LeanCoffee) {","        self.presenter = CreateTopicPresenter(leanCoffee)","    }","","    var body: some View {","        VStack {","            Text(\"Create a new topic to discuss\")","                .font(.title).fontWeight(.black)","                .padding(.bottom, 24)","            ","            TextField(\"Topic title\", text: $presenter.title, prompt: Text(\"Topic title\"))","            ","            TextField(\"Description\", text: $presenter.description, prompt: Text(\"Description\"))","            ","            Spacer()","            ","            BoldButton(\"Submit\") { presenter.handleFormSubmission() }","            ","        }","        .padding()","        .toAsyncView(presenter)","    }","}"],"fileName":"CreateTopicView.swift","identifier":"CreateTopicView2.swift","type":"file","fileType":"swift","highlights":[{"line":4},{"line":5},{"line":6},{"line":7},{"line":8},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":21},{"line":22},{"line":23},{"line":26}]},"https://developer.apple.com/documentation/swiftui/navigationlink":{"title":"Navigation Link","titleInlineContent":[{"type":"text","text":"Navigation Link"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/navigationlink","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/navigationlink"},"LeanCoffeeView14.swift":{"syntax":"swift","content":["import SwiftUI","","struct LeanCoffeeView: View {","    @ObservedObject var presenter: LeanCoffeePresenter","    ","    ","    @ViewBuilder func badge(for topic: Topic) -> some View {","        if topic.completed {","            Image(systemName: \"checkmark\")","                .frame(minWidth: 30, minHeight: 30)","                .background(Color.green.cornerRadius(.greatestFiniteMagnitude))","        } else {","            Text(\"\\(topic.votes.count)\")","                .frame(minWidth: 30, minHeight: 30)","                .background(Color.brown.cornerRadius(.greatestFiniteMagnitude))","        }","    }","    ","    ","    @ViewBuilder func swipeActions(for topic: Topic) -> some View {","        if topic.completed {","            EmptyView() \/\/ If the topic is complete, there is no need to swipe","        } else {","            \/\/ The first button will trigger automatically on a full swipe","            Button(action: { presenter.voteAndReload(forTopic: topic) }){","                Image(systemName: \"hand.thumbsup.fill\")","            }.tint(.green)","            ","            Button(action: { presenter.completeAndReload(forTopic: topic) })","            {","                Image(systemName: \"checkmark\")","            }.tint(Color.red)","        }","    }","    ","    ","    @ViewBuilder func listRow(for topic: Topic) -> some View {","        HStack {","            Spacer()","            ","            badge(for: topic)","                .font(.headline.bold())","                .foregroundColor(.white)","                .padding(.bottom)","            ","            Spacer()","        }","        ","        Text(topic.title)","            .font(.headline)","            .multilineTextAlignment(.center)","        ","        Text(topic.description)","            .font(.subheadline)","            .padding(.bottom)","            .lineLimit(6)","    }","    ","    ","    func errorMessageProvider(_ error: Error?) -> String? {","        switch error as? HTTPClientError {","        case .requestError(let code, _, _):","            if code == 409 {","                return \"You've already voted on this topic!\"","            }","        default: return nil","        }","        ","        return nil","    }","    ","    ","    var body: some View {","        ","        Text(presenter.leanCoffee.title)","            .padding(.horizontal)","            .multilineTextAlignment(.center)","            .lineLimit(2)","        ","        List(presenter.topics) { topic in","            VStack(spacing: 16) {","                listRow(for: topic)","            }","            .padding(.vertical)","            .navigationTitle(Text(\"Topics\"))","            .swipeActions(edge: .trailing) { swipeActions(for: topic) }","        }","        .task {","            await presenter.getAllTopics()","        }","        .refreshable {","            await presenter.getAllTopics()","        }","        .toAsyncView(presenter, errorMessageProvider: errorMessageProvider)","    }","}"],"fileName":"LeanCoffeeView.swift","identifier":"LeanCoffeeView14.swift","type":"file","fileType":"swift","highlights":[]},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/Presenter#The-Sign-In-Presenter":{"role":"pseudoSymbol","title":"The Sign In Presenter","abstract":[{"type":"text","text":"In this chapter we’ll refactor the Sign in and Sign up views to use the Presenter pattern. This will allow us to reuse some of the code, and pull the business logic out of the view."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Presenter#The-Sign-In-Presenter","kind":"section","type":"section","url":"\/tutorials\/leancoffeeapp\/presenter#The-Sign-In-Presenter"},"doc://LeanCoffeeApp/tutorials/Tutorial-Table-of-Contents/Lists-and-Dependencies":{"role":"article","title":"Lists and Dependencies","abstract":[],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents\/Lists-and-Dependencies","kind":"article","type":"topic","url":"\/tutorials\/tutorial-table-of-contents\/lists-and-dependencies"},"https://github.com/JZDesign/LeanCoffeeService#create-lean-coffee":{"title":"docs","titleInlineContent":[{"type":"text","text":"docs"}],"type":"link","identifier":"https:\/\/github.com\/JZDesign\/LeanCoffeeService#create-lean-coffee","url":"https:\/\/github.com\/JZDesign\/LeanCoffeeService#create-lean-coffee"},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/Loading-and-Errors#A-Loading-View":{"role":"pseudoSymbol","title":"A Loading View","abstract":[{"type":"text","text":"There’s nothing worse than an app that doesn’t show loading states or errors…"}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Loading-and-Errors#A-Loading-View","kind":"section","type":"section","url":"\/tutorials\/leancoffeeapp\/loading-and-errors#A-Loading-View"},"doc://LeanCoffeeApp/tutorials/Tutorial-Table-of-Contents":{"role":"overview","title":"Lean Coffee","abstract":[{"type":"text","text":"Create a Lean Coffee app for iOS! Create lean coffee events, topics, and votes without the pens or sticky notes!"}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents","kind":"overview","type":"topic","url":"\/tutorials\/tutorial-table-of-contents"}}}