{"variants":[{"paths":["\/tutorials\/leancoffeeapp\/lean-coffee-topics"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Learn how to crate custom list rows with swipe actions, sorting, and more."}]}],"estimatedTimeInMinutes":60,"title":"The Lean Coffee View","image":"coffee-beans.png","chapter":"In the Topics","kind":"hero","backgroundImage":"coffee-beans.png"},{"kind":"tasks","tasks":[{"anchor":"Creating-the-Lean-Coffee-View","title":"Creating the Lean Coffee View","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This view will display a list of topics that will be discussed in a lean coffe, as well as allow the user to vote or close a topic."}]}],"mediaPosition":"trailing","media":"swift.png"}],"stepsSection":[{"code":"LCModels.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Find "},{"type":"codeVoice","code":"Models.swift"},{"type":"text","text":" and add the Topic and Vote models we’ll need to finish this chapter."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"LeanCoffeeView.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Then create a file named "},{"type":"codeVoice","code":"LeanCoffeeView.swift"},{"type":"text","text":" and create the list with a placeholder for the topics."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"LeanCoffeeView1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We’ll add the placeholder data by iterating through a range."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that we have data to see what the view will look like, let’s get to it!"}]}],"type":"step","runtimePreview":"LeanCoffeeView1.png","media":null},{"code":"LeanCoffeeView2.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Topics are  children of a lean coffee. That means, in order to pull them down we’ll need to know what the parent is. Additionally, it would be helpful to the user to have some indication of what Lean Cofee they’re looking at."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To help the user understand where they are, we’ll add a description to the list view. Just in case the creator of the lean coffee is a person of many words, we’ll put a line limit on the title."}]}],"type":"step","runtimePreview":"LeanCoffeeView2.png","media":null},{"code":"LeanCoffeeView3.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Sweet! With that data, we can see what the view will look like."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We’ll begin by adding the description to the row, and making sure the user can tell the title apart from the description."}]}],"type":"step","runtimePreview":"LeanCoffeeView3.png","media":null},{"code":"LeanCoffeeView4.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, we’ll add a view to display how many votes the topic has or if it’s been completed. SwiftUI makes it pretty easy to customize views to look however you want them too. I’d like this to be a circle. So we’ll give the view a background color with a radius that always returns a circle."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To ensure the font can be seen we’ll make sure the min height and width are larger than the default font size. Then we’ll pad the bottom just to separate the title from this badge."}]}],"type":"step","runtimePreview":"LeanCoffeeView4.png","media":null},{"code":"LeanCoffeeView5.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To center it, we’ll nest it in a Horizontal Stack view, surrounded by spacers."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This also centers the other text outside of the HStack. While, it looked like the width of the row content was the width of the screen, it was actually the width of the widest subview. This pushes the width to the maximum, centering the title and description of each row."}]}],"type":"step","runtimePreview":"LeanCoffeeView5.png","media":null},{"code":"LeanCoffeeView6.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We’re going to clean up the body a little bit, and make it more apparent if the topic is completed. To do so, we’ll create a "},{"type":"codeVoice","code":"@ViewBuilder"},{"type":"text","text":" function that computes what the badge content should be."}]}],"caption":[],"type":"step","runtimePreview":"LeanCoffeeView6.png","media":null},{"code":"LeanCoffeeView7.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The rows are pretty crowded. Scroll down to line 59 and add some padding to the view. Also, it would be nice to add a header to the page."}]}],"caption":[],"type":"step","runtimePreview":"LeanCoffeeView7.png","media":null},{"code":"LeanCoffeeView8.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"After that, we’ll add some swipe actions starting on line 61. In  previous UI frameworks, this was kind of a pain in the rear. SwiftUI has made it a breeze."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"All we need to do is invoke the "},{"type":"codeVoice","code":"swipeActions"},{"type":"text","text":" function and add as many buttons in there as we see fit!"}]}],"type":"step","runtimePreview":"LeanCoffeeView8.png","media":null},{"code":"LeanCoffeeView9.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"I’d like to get in the habbit of keeping the body pretty clean. Let’s pull those buttons out into their own function."}]}],"caption":[],"type":"step","runtimePreview":"LeanCoffeeView9.png","media":null},{"code":"LeanCoffeeView10.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Same goes for the actual content of the row. Let’s pull that out too."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that we have the view figured out, let’s move onto the presenter. Scroll down to the next section to get started."}]}],"type":"step","runtimePreview":"LeanCoffeeView10.png","media":null}]},{"anchor":"Creating-the-Lean-Coffee-Presenter","title":"Creating the Lean Coffee Presenter","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This will create the presenter responsible for fetching and modifying the Lean Coffee topics."}]}],"mediaPosition":"trailing","media":"swift.png"}],"stepsSection":[{"code":"LeanCoffeePresenter1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a file named "},{"type":"codeVoice","code":"LeanCoffeePresenter.swift"},{"type":"text","text":", it will need a lean coffee in order to fetch the topics for the page. So add one of those and write an initializer."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"LeanCoffeePresenter2.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, let’s inject the token store and start making the request to get all of the topics for this view. The first thing we’ll need to do is making the authorization header like we did in the Home Presenter."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"LeanCoffeePresenter3.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Then we can call the api and assign the result to the published array."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"LeanCoffeePresenter4.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"While we’re in here, let’s do the work of sorting the topics by vote count and completed status. We want to show the topics with the most votes up top unless they’ve been completed."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"There are other functions that the view will require of this presenter. Aside from getting all the topics, the user can vote on a topic or mark the topic complete in the swipe actions on the list row. That means we’ll need to write the authorization header some more times if we keep that in this presenter. We’ll also need to do it again in other presenters, so let’s make a change."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"HttpClient1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Take a look at the Http Client file. We want to find a way to reuse this and add the authorization header we need to every request. There is a function named "},{"type":"codeVoice","code":"createRequest"},{"type":"text","text":" that we can use. Let’s make a new class to override this function and inject the header on every request."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"AuthorizedHttpClient1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a file named "},{"type":"codeVoice","code":"AuthorizedHttpClient.swift"},{"type":"text","text":" and place the environment variable in there."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"AuthorizedHttpClient2.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Then we’ll override the "},{"type":"codeVoice","code":"createRequest"},{"type":"text","text":" method on the "},{"type":"codeVoice","code":"HttpClient"},{"type":"text","text":" to include this header for every request that goes through the new "},{"type":"codeVoice","code":"AuthorizedHttpClient"},{"type":"text","text":"."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will call the super method to take advantage of all the work we’ve done previously, then inject the header and return the modified result."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"LeanCoffeePresenter4-copy.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Navigate back to "},{"type":"codeVoice","code":"LeanCoffeePresenter.swift"}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"LeanCoffeePresenter5.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Update the function to use the new client. When you’re done, you can go to the "},{"type":"codeVoice","code":"HomeViewPresenter"},{"type":"text","text":" and do the same."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now we’re going to write the other primary functions of this presenter."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"LeanCoffeePresenter6.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"After the user swipes the row and performs either the vote or complete actions, the view will need fresh data to reflect the changes in the api. For this reason, we’re going to break out the vote and complete functions a little."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Start with a private function named "},{"type":"codeVoice","code":"voteOn"},{"type":"text","text":" that will make the request to the api."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"LeanCoffeePresenter7.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Then we’ll make a "},{"type":"strong","inlineContent":[{"type":"text","text":"Non"}]},{"type":"text","text":"-private function named "},{"type":"codeVoice","code":"voteAndReload"},{"type":"text","text":" that the view can call. This doesn’t need to use the "},{"type":"codeVoice","code":"perform"},{"type":"text","text":" function becuase the other 2 functions it calls already use it."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"LeanCoffeePresenter8.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Like we did with "},{"type":"codeVoice","code":"voteOn"},{"type":"text","text":" we’ll make a private method named "},{"type":"codeVoice","code":"complete"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"LeanCoffeePresenter9.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And another method named "},{"type":"codeVoice","code":"completeAndReload"},{"type":"text","text":"."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"🔥☝️"}]}],"type":"step","runtimePreview":null,"media":null},{"code":"LeanCoffeeView10-copy.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s go back to the view and add this logic."}]}],"caption":[],"type":"step","runtimePreview":"LeanCoffeeView10.png","media":null},{"code":"LeanCoffeeView11.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Up top, we can remove the dummy data, and then down below we’ll reference the presenter where we were referencing the "},{"type":"codeVoice","code":"@State"},{"type":"text","text":" variable. And we’ll add the "},{"type":"codeVoice","code":"task"},{"type":"text","text":" and "},{"type":"codeVoice","code":"refreshable"},{"type":"text","text":" modifiers to the view."}]}],"caption":[],"type":"step","runtimePreview":"LeanCoffeeView11.png","media":null},{"code":"LeanCoffeeView12.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add functions the swipe action buttons."}]}],"caption":[],"type":"step","runtimePreview":"LeanCoffeeView11.png","media":null},{"code":"LeanCoffeeView13.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Then we’ll make this view an async view to handle the loading and error states for us."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"After you’ve done that, vote on the same topic twice. You should get an error message that isn’t very helpful. Let’s fix that."}]}],"type":"step","runtimePreview":"LeanCoffeeView13.png","media":null},{"code":"LeanCoffeeView14.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We’ll make an error message provider function to pass to the async view. Inside of the function body we can switch on the error while casting it to the expected type of error\u0010. If the cast succeeds we can then assert that it is a very specific error and act on that information."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Here we care about a 409 status code. If that code is returned, we’ll tell the user that they’ve already voted on the topic and cannot vote again."}]}],"type":"step","runtimePreview":"LeanCoffeeView14.png","media":null},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The app is coming along! Now the user can get all of the lean coffee events and their topics, as well as vote on or close those topics. The last body of work before it’s something we can really use is adding the ability to create topics and lean coffee events."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In the next chapter we’ll cover creating Lean Coffee events and their topics."}]}],"type":"step","runtimePreview":null,"media":null}]}]},{"action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"type":"reference","identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/New-Lean-Coffee-Events-and-Topics","overridingTitle":"Get started"},"featuredEyebrow":"Tutorial","kind":"callToAction","title":"Let there be Coffee","abstract":[{"type":"text","text":"In this chapter we’ll finish implementing the application’s core functionality by allowing the user to create Lean Coffee events and their topics."}]}],"identifier":{"url":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Lean-Coffee-Topics","interfaceLanguage":"swift"},"kind":"project","metadata":{"title":"The Lean Coffee View","categoryPathComponent":"Tutorial-Table-of-Contents","role":"project","category":"Lean Coffee - iOS"},"hierarchy":{"modules":[{"reference":"doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents\/Getting-started-with-SwiftUI","projects":[{"reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Getting-Started","sections":[{"kind":"task","reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Getting-Started#Your-first-SwiftUI-View"}]}]},{"reference":"doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents\/Authentication","projects":[{"reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Sign-in-and-Sign-up","sections":[{"kind":"task","reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Sign-in-and-Sign-up#Creating-the-Sign-in-View"},{"kind":"task","reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Sign-in-and-Sign-up#Creating-the-Sign-Up-View"}]}]},{"reference":"doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents\/The-Presenter-Pattern","projects":[{"reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Presenter","sections":[{"kind":"task","reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Presenter#A-basic-Presenter"},{"kind":"task","reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Presenter#The-Sign-In-Presenter"}]}]},{"reference":"doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents\/Loading-and-Errors","projects":[{"reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Loading-and-Errors","sections":[{"kind":"task","reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Loading-and-Errors#A-Loading-View"},{"kind":"task","reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Loading-and-Errors#The-AsyncView"}]}]},{"reference":"doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents\/Lists-and-Dependencies","projects":[{"reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/List-View","sections":[{"kind":"task","reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/List-View#A-laundry-list-of-things-to-do."},{"kind":"task","reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/List-View#Dependency-injection"}]}]},{"reference":"doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents\/In-the-Topics","projects":[{"reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Lean-Coffee-Topics","sections":[{"kind":"task","reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Lean-Coffee-Topics#Creating-the-Lean-Coffee-View"},{"kind":"task","reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Lean-Coffee-Topics#Creating-the-Lean-Coffee-Presenter"}]}]},{"reference":"doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents\/Create-New-Events-and-Topics","projects":[{"reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/New-Lean-Coffee-Events-and-Topics","sections":[{"kind":"task","reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/New-Lean-Coffee-Events-and-Topics#Form-Submissions"},{"kind":"task","reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/New-Lean-Coffee-Events-and-Topics#Creating-a-Lean-Coffee"},{"kind":"task","reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/New-Lean-Coffee-Events-and-Topics#Creating-a-Topic"},{"kind":"task","reference":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/New-Lean-Coffee-Events-and-Topics#You-did-it!-%F0%9F%94%A5%E2%98%9D%EF%B8%8F"}]}]}],"reference":"doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents","paths":[["doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents","doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents\/$volume","doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents\/In-the-Topics"]]},"references":{"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/Lean-Coffee-Topics#Creating-the-Lean-Coffee-Presenter":{"role":"pseudoSymbol","title":"Creating the Lean Coffee Presenter","abstract":[{"type":"text","text":"Learn how to crate custom list rows with swipe actions, sorting, and more."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Lean-Coffee-Topics#Creating-the-Lean-Coffee-Presenter","kind":"section","type":"section","url":"\/tutorials\/leancoffeeapp\/lean-coffee-topics#Creating-the-Lean-Coffee-Presenter"},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/List-View#A-laundry-list-of-things-to-do.":{"role":"pseudoSymbol","title":"A laundry list of things to do.","abstract":[{"type":"text","text":"Create the list view of all the Lean Coffee Events and learn about Dependency Injection with SwiftUI."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/List-View#A-laundry-list-of-things-to-do.","kind":"section","type":"section","url":"\/tutorials\/leancoffeeapp\/list-view#A-laundry-list-of-things-to-do."},"LeanCoffeePresenter4.swift":{"syntax":"swift","content":["import SwiftUI","","class LeanCoffeePresenter: Presenter {","    let leanCoffee: LeanCoffee","    @Environment(\\.tokenStore) var tokenStore: TokenStore","    ","    @Published var topics: [Topic] = []","    ","    init(_ leanCoffee: LeanCoffee) {","        self.leanCoffee = leanCoffee","    }","    ","    func getAllTopics() async {","        await perform {","            let header = [\"Authorization\": \"Bearer \\(self.tokenStore.accessToken?.value ?? \"\")\"]","            let unsortedTopics = try await HttpClient()","                .get(","                    decodeReponse: [Topic].self,","                    url: rootURL + \"\/leancoffee\/\\(self.leanCoffee.id)\/topics\",","                    withHeaders: header","                )","","            self.topics = unsortedTopics","                .sorted { $0.votes.count > $1.votes.count }","                .sorted { $0.completed == false && $1.completed }","        }","    }","}"],"fileName":"LeanCoffeePresenter.swift","identifier":"LeanCoffeePresenter4.swift","type":"file","fileType":"swift","highlights":[{"line":16},{"line":22},{"line":23},{"line":24},{"line":25}]},"LeanCoffeeView.swift":{"syntax":"swift","content":["import SwiftUI","","struct LeanCoffeeView: View {","    ","    @State var topics: [Topic] = []","    ","    var body: some View {","        List(topics) { topic in","            Text(topic.title)","        }","    }","}"],"fileName":"LeanCoffeeView.swift","identifier":"LeanCoffeeView.swift","type":"file","fileType":"swift","highlights":[]},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/Getting-Started":{"role":"project","title":"Your first SwiftUI View","estimatedTime":"15min","abstract":[{"type":"text","text":"Create the landing page of the Lean Coffee application supporting iPhone, iPad, and darkmode."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Getting-Started","kind":"project","type":"topic","url":"\/tutorials\/leancoffeeapp\/getting-started"},"LeanCoffeePresenter3.swift":{"syntax":"swift","content":["import SwiftUI","","class LeanCoffeePresenter: Presenter {","    let leanCoffee: LeanCoffee","    @Environment(\\.tokenStore) var tokenStore: TokenStore","    ","    @Published var topics: [Topic] = []","    ","    init(_ leanCoffee: LeanCoffee) {","        self.leanCoffee = leanCoffee","    }","    ","    func getAllTopics() async {","        await perform {","            let header = [\"Authorization\": \"Bearer \\(self.tokenStore.accessToken?.value ?? \"\")\"]","            self.topics = try await HttpClient()","                .get(","                    decodeReponse: [Topic].self,","                    url: rootURL + \"\/leancoffee\/\\(self.leanCoffee.id)\/topics\",","                    withHeaders: header","                )","        }","    }","}"],"fileName":"LeanCoffeePresenter.swift","identifier":"LeanCoffeePresenter3.swift","type":"file","fileType":"swift","highlights":[{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21}]},"LeanCoffeeView13.png":{"alt":"The lean coffee view","type":"image","identifier":"LeanCoffeeView13.png","variants":[{"url":"\/images\/LeanCoffeeView13.png","traits":["1x","light"]}]},"LeanCoffeeView3.swift":{"syntax":"swift","content":["import SwiftUI","","struct LeanCoffeeView: View {","    let leanCoffee: LeanCoffee","    ","    @State var topics: [Topic] = (1..<4).compactMap {","        Topic(","            id: \"\\($0)\",","            title: \" Topic \\($0)\",","            description: \"Some Description\",","            completed: $0 % 2 == 0 ? true : false,","            votes: [Vote(id: \"\\($0)\")]","        )","    }","    ","    var body: some View {","        ","        Text(leanCoffee.title)","            .padding(.horizontal)","            .multilineTextAlignment(.center)","            .lineLimit(2)","        ","        List(topics) { topic in","            VStack(spacing: 16) {","                Text(topic.title)","                    .font(.headline)","                    .multilineTextAlignment(.center)","                ","                Text(topic.description)","                    .font(.subheadline)","                    .padding(.bottom)","                    .lineLimit(6)","            }","            ","        }","    }","}"],"fileName":"LeanCoffeeView.swift","identifier":"LeanCoffeeView3.swift","type":"file","fileType":"swift","highlights":[{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34}]},"LeanCoffeeView10.swift":{"syntax":"swift","content":["import SwiftUI","","struct LeanCoffeeView: View {","    let leanCoffee: LeanCoffee","    ","    @State var topics: [Topic] = (1..<4).compactMap {","        Topic(","            id: \"\\($0)\",","            title: \" Topic \\($0)\",","            description: \"Some Description\",","            completed: $0 % 2 == 0 ? true : false,","            votes: [Vote(id: \"\\($0)\")]","        )","    }","    ","    @ViewBuilder func badge(for topic: Topic) -> some View {","        if topic.completed {","            Image(systemName: \"checkmark\")","                .frame(minWidth: 30, minHeight: 30)","                .background(Color.green.cornerRadius(.greatestFiniteMagnitude))","        } else {","            Text(\"\\(topic.votes.count)\")","                .frame(minWidth: 30, minHeight: 30)","                .background(Color.brown.cornerRadius(.greatestFiniteMagnitude))","        }","    }","    ","    ","    @ViewBuilder func swipeActions(for topic: Topic) -> some View {","        if topic.completed {","            EmptyView() \/\/ If the topic is complete, there is no need to swipe","        } else {","            \/\/ The first button will trigger automatically on a full swipe","            Button(action: { print(\"Voted\") }){","                Image(systemName: \"hand.thumbsup.fill\")","            }.tint(.green)","            ","            Button(action: { print(\"Topic completed\") })","            {","                Image(systemName: \"checkmark\")","            }.tint(Color.red)","        }","    }","    ","    ","    @ViewBuilder func listRow(for topic: Topic) -> some View {","        HStack {","            Spacer()","            ","            badge(for: topic)","                .font(.headline.bold())","                .foregroundColor(.white)","                .padding(.bottom)","            ","            Spacer()","        }","        ","        Text(topic.title)","            .font(.headline)","            .multilineTextAlignment(.center)","        ","        Text(topic.description)","            .font(.subheadline)","            .padding(.bottom)","            .lineLimit(6)","    }","    ","    ","    var body: some View {","        ","        Text(leanCoffee.title)","            .padding(.horizontal)","            .multilineTextAlignment(.center)","            .lineLimit(2)","        ","        List(topics) { topic in","            VStack(spacing: 16) {","                listRow(for: topic)","            }","            .padding(.vertical)","            .navigationTitle(Text(\"Topics\"))","            .swipeActions(edge: .trailing) { swipeActions(for: topic) }","        }","    }","}"],"fileName":"LeanCoffeeView.swift","identifier":"LeanCoffeeView10.swift","type":"file","fileType":"swift","highlights":[{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":78}]},"swift.png":{"alt":"swift logo","type":"image","identifier":"swift.png","variants":[{"url":"\/images\/swift.png","traits":["1x","light"]}]},"AuthorizedHttpClient1.swift":{"syntax":"swift","content":["import SwiftUI","","class AuthorizedHttpClient: HttpClient {","    @Environment(\\.tokenStore) var tokenStore: TokenStore","","    override init() { super.init() }","}"],"fileName":"AuthorizedHttpClient.swift","identifier":"AuthorizedHttpClient1.swift","type":"file","fileType":"swift","highlights":[]},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/List-View#Dependency-injection":{"role":"pseudoSymbol","title":"Dependency injection","abstract":[{"type":"text","text":"Create the list view of all the Lean Coffee Events and learn about Dependency Injection with SwiftUI."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/List-View#Dependency-injection","kind":"section","type":"section","url":"\/tutorials\/leancoffeeapp\/list-view#Dependency-injection"},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/Sign-in-and-Sign-up#Creating-the-Sign-Up-View":{"role":"pseudoSymbol","title":"Creating the Sign Up View","abstract":[{"type":"text","text":"Use the view from Chapter 1 to present a Sign in or Sign up form and log a user into the application."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Sign-in-and-Sign-up#Creating-the-Sign-Up-View","kind":"section","type":"section","url":"\/tutorials\/leancoffeeapp\/sign-in-and-sign-up#Creating-the-Sign-Up-View"},"LeanCoffeeView1.swift":{"syntax":"swift","content":["import SwiftUI","","struct LeanCoffeeView: View {","    ","    @State var topics: [Topic] = (1..<4).compactMap {","        Topic(","            id: \"\\($0)\",","            title: \" Topic \\($0)\",","            description: \"Some Description\",","            completed: $0 % 2 == 0 ? true : false,","            votes: [Vote(id: \"\\($0)\")]","        )","    }","    ","    var body: some View {","        List(topics) { topic in","            Text(topic.title)","        }","    }","}"],"fileName":"LeanCoffeeView.swift","identifier":"LeanCoffeeView1.swift","type":"file","fileType":"swift","highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13}]},"LeanCoffeePresenter8.swift":{"syntax":"swift","content":["import SwiftUI","","class LeanCoffeePresenter: Presenter {","    let leanCoffee: LeanCoffee","    ","    @Published var topics: [Topic] = []","    ","    init(_ leanCoffee: LeanCoffee) {","        self.leanCoffee = leanCoffee","    }","    ","    func getAllTopics() async {","        await perform {","            let unsortedTopics = try await AuthorizedHttpClient()","                .get(","                    decodeReponse: [Topic].self,","                    url: rootURL + \"\/leancoffee\/\\(self.leanCoffee.id)\/topics\"","                )","            ","            self.topics = unsortedTopics","                .sorted { $0.votes.count > $1.votes.count }","                .sorted { $0.completed == false && $1.completed }","        }","    }","    ","    private func voteOn(topic: Topic) async {","        await perform {","            try await AuthorizedHttpClient()","                .post(body: CastVote(topicId: topic.id), url: rootURL + \"\/votes\")","        }","    }","    ","    func voteAndReload(forTopic topic: Topic) {","        Task {","            await voteOn(topic: topic)","            await getAllTopics()","        }","    }","    ","    private func complete(topic: Topic) async throws {","        try await AuthorizedHttpClient()","            .post(","                body: nil as String?,","                url: rootURL + \"\/topics\/\\(topic.id)\/complete\"","            )","    }","}"],"fileName":"LeanCoffeePresenter.swift","identifier":"LeanCoffeePresenter8.swift","type":"file","fileType":"swift","highlights":[{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46}]},"doc://LeanCoffeeApp/tutorials/Tutorial-Table-of-Contents/Create-New-Events-and-Topics":{"role":"article","title":"Create New Events and Topics","abstract":[],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents\/Create-New-Events-and-Topics","kind":"article","type":"topic","url":"\/tutorials\/tutorial-table-of-contents\/create-new-events-and-topics"},"LeanCoffeeView14.swift":{"syntax":"swift","content":["import SwiftUI","","struct LeanCoffeeView: View {","    @ObservedObject var presenter: LeanCoffeePresenter","    ","    ","    @ViewBuilder func badge(for topic: Topic) -> some View {","        if topic.completed {","            Image(systemName: \"checkmark\")","                .frame(minWidth: 30, minHeight: 30)","                .background(Color.green.cornerRadius(.greatestFiniteMagnitude))","        } else {","            Text(\"\\(topic.votes.count)\")","                .frame(minWidth: 30, minHeight: 30)","                .background(Color.brown.cornerRadius(.greatestFiniteMagnitude))","        }","    }","    ","    ","    @ViewBuilder func swipeActions(for topic: Topic) -> some View {","        if topic.completed {","            EmptyView() \/\/ If the topic is complete, there is no need to swipe","        } else {","            \/\/ The first button will trigger automatically on a full swipe","            Button(action: { presenter.voteAndReload(forTopic: topic) }){","                Image(systemName: \"hand.thumbsup.fill\")","            }.tint(.green)","            ","            Button(action: { presenter.completeAndReload(forTopic: topic) })","            {","                Image(systemName: \"checkmark\")","            }.tint(Color.red)","        }","    }","    ","    ","    @ViewBuilder func listRow(for topic: Topic) -> some View {","        HStack {","            Spacer()","            ","            badge(for: topic)","                .font(.headline.bold())","                .foregroundColor(.white)","                .padding(.bottom)","            ","            Spacer()","        }","        ","        Text(topic.title)","            .font(.headline)","            .multilineTextAlignment(.center)","        ","        Text(topic.description)","            .font(.subheadline)","            .padding(.bottom)","            .lineLimit(6)","    }","    ","    ","    func errorMessageProvider(_ error: Error?) -> String? {","        switch error as? HTTPClientError {","        case .requestError(let code, _, _):","            if code == 409 {","                return \"You've already voted on this topic!\"","            }","        default: return nil","        }","        ","        return nil","    }","    ","    ","    var body: some View {","        ","        Text(presenter.leanCoffee.title)","            .padding(.horizontal)","            .multilineTextAlignment(.center)","            .lineLimit(2)","        ","        List(presenter.topics) { topic in","            VStack(spacing: 16) {","                listRow(for: topic)","            }","            .padding(.vertical)","            .navigationTitle(Text(\"Topics\"))","            .swipeActions(edge: .trailing) { swipeActions(for: topic) }","        }","        .task {","            await presenter.getAllTopics()","        }","        .refreshable {","            await presenter.getAllTopics()","        }","        .toAsyncView(presenter, errorMessageProvider: errorMessageProvider)","    }","}"],"fileName":"LeanCoffeeView.swift","identifier":"LeanCoffeeView14.swift","type":"file","fileType":"swift","highlights":[{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":94}]},"LeanCoffeePresenter1.swift":{"syntax":"swift","content":["import SwiftUI","","class LeanCoffeePresenter: Presenter {","    let leanCoffee: LeanCoffee","    ","    @Published var topics: [Topic] = []","    ","    init(_ leanCoffee: LeanCoffee) {","        self.leanCoffee = leanCoffee","    }","}"],"fileName":"LeanCoffeePresenter.swift","identifier":"LeanCoffeePresenter1.swift","type":"file","fileType":"swift","highlights":[]},"LCModels.swift":{"syntax":"swift","content":["import SwiftUI","","struct LeanCoffee: Codable, Identifiable {","    let id: String","    let title: String","    let date: String","}","","struct Topic: Codable, Identifiable {","    let id: String","    let title: String","    let description: String","    let completed: Bool","    let votes: [Vote]","}","","struct Vote: Codable, Identifiable {","    let id: String","}","","struct CastVote: Codable {","    let topicId: String","}"],"fileName":"Models.swift","identifier":"LCModels.swift","type":"file","fileType":"swift","highlights":[]},"LeanCoffeeView10-copy.swift":{"syntax":"swift","content":["import SwiftUI","","struct LeanCoffeeView: View {","    let leanCoffee: LeanCoffee","    ","    @State var topics: [Topic] = (1..<4).compactMap {","        Topic(","            id: \"\\($0)\",","            title: \" Topic \\($0)\",","            description: \"Some Description\",","            completed: $0 % 2 == 0 ? true : false,","            votes: [Vote(id: \"\\($0)\")]","        )","    }","    ","    @ViewBuilder func badge(for topic: Topic) -> some View {","        if topic.completed {","            Image(systemName: \"checkmark\")","                .frame(minWidth: 30, minHeight: 30)","                .background(Color.green.cornerRadius(.greatestFiniteMagnitude))","        } else {","            Text(\"\\(topic.votes.count)\")","                .frame(minWidth: 30, minHeight: 30)","                .background(Color.brown.cornerRadius(.greatestFiniteMagnitude))","        }","    }","    ","    ","    @ViewBuilder func swipeActions(for topic: Topic) -> some View {","        if topic.completed {","            EmptyView() \/\/ If the topic is complete, there is no need to swipe","        } else {","            \/\/ The first button will trigger automatically on a full swipe","            Button(action: { print(\"Voted\") }){","                Image(systemName: \"hand.thumbsup.fill\")","            }.tint(.green)","            ","            Button(action: { print(\"Topic completed\") })","            {","                Image(systemName: \"checkmark\")","            }.tint(Color.red)","        }","    }","    ","    ","    @ViewBuilder func listRow(for topic: Topic) -> some View {","        HStack {","            Spacer()","            ","            badge(for: topic)","                .font(.headline.bold())","                .foregroundColor(.white)","                .padding(.bottom)","            ","            Spacer()","        }","        ","        Text(topic.title)","            .font(.headline)","            .multilineTextAlignment(.center)","        ","        Text(topic.description)","            .font(.subheadline)","            .padding(.bottom)","            .lineLimit(6)","    }","    ","    ","    var body: some View {","        ","        Text(leanCoffee.title)","            .padding(.horizontal)","            .multilineTextAlignment(.center)","            .lineLimit(2)","        ","        List(topics) { topic in","            VStack(spacing: 16) {","                listRow(for: topic)","            }","            .padding(.vertical)","            .navigationTitle(Text(\"Topics\"))","            .swipeActions(edge: .trailing) { swipeActions(for: topic) }","        }","    }","}"],"fileName":"LeanCoffeeView.swift","identifier":"LeanCoffeeView10-copy.swift","type":"file","fileType":"swift","highlights":[]},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/Getting-Started#Your-first-SwiftUI-View":{"role":"pseudoSymbol","title":"Your first SwiftUI View","abstract":[{"type":"text","text":"Create the landing page of the Lean Coffee application supporting iPhone, iPad, and darkmode."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Getting-Started#Your-first-SwiftUI-View","kind":"section","type":"section","url":"\/tutorials\/leancoffeeapp\/getting-started#Your-first-SwiftUI-View"},"LeanCoffeeView9.swift":{"syntax":"swift","content":["import SwiftUI","","struct LeanCoffeeView: View {","    let leanCoffee: LeanCoffee","    ","    @State var topics: [Topic] = (1..<4).compactMap {","        Topic(","            id: \"\\($0)\",","            title: \" Topic \\($0)\",","            description: \"Some Description\",","            completed: $0 % 2 == 0 ? true : false,","            votes: [Vote(id: \"\\($0)\")]","        )","    }","    ","    @ViewBuilder func badge(for topic: Topic) -> some View {","        if topic.completed {","            Image(systemName: \"checkmark\")","                .frame(minWidth: 30, minHeight: 30)","                .background(Color.green.cornerRadius(.greatestFiniteMagnitude))","        } else {","            Text(\"\\(topic.votes.count)\")","                .frame(minWidth: 30, minHeight: 30)","                .background(Color.brown.cornerRadius(.greatestFiniteMagnitude))","        }","    }","    ","    ","    @ViewBuilder func swipeActions(for topic: Topic) -> some View {","        if topic.completed {","            EmptyView() \/\/ If the topic is complete, there is no need to swipe","        } else {","            \/\/ The first button will trigger automatically on a full swipe","            Button(action: { print(\"Voted\") }){","                Image(systemName: \"hand.thumbsup.fill\")","            }.tint(.green)","            ","            Button(action: { print(\"Topic completed\") })","            {","                Image(systemName: \"checkmark\")","            }.tint(Color.red)","        }","    }","    ","    ","    var body: some View {","        ","        Text(leanCoffee.title)","            .padding(.horizontal)","            .multilineTextAlignment(.center)","            .lineLimit(2)","        ","        List(topics) { topic in","            VStack(spacing: 16) {","                HStack {","                    Spacer()","                    ","                    badge(for: topic)","                        .font(.headline.bold())","                        .foregroundColor(.white)","                        .padding(.bottom)","                    ","                    Spacer()","                }","                ","                Text(topic.title)","                    .font(.headline)","                    .multilineTextAlignment(.center)","                ","                Text(topic.description)","                    .font(.subheadline)","                    .padding(.bottom)","                    .lineLimit(6)","            }","            .padding(.vertical)","            .navigationTitle(Text(\"Topics\"))","            .swipeActions(edge: .trailing) { swipeActions(for: topic) }","        }","    }","}"],"fileName":"LeanCoffeeView.swift","identifier":"LeanCoffeeView9.swift","type":"file","fileType":"swift","highlights":[{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":77}]},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/Loading-and-Errors":{"role":"project","title":"Loading and Errors","estimatedTime":"25min","abstract":[{"type":"text","text":"There’s nothing worse than an app that doesn’t show loading states or errors…"}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Loading-and-Errors","kind":"project","type":"topic","url":"\/tutorials\/leancoffeeapp\/loading-and-errors"},"LeanCoffeePresenter7.swift":{"syntax":"swift","content":["import SwiftUI","","class LeanCoffeePresenter: Presenter {","    let leanCoffee: LeanCoffee","    ","    @Published var topics: [Topic] = []","    ","    init(_ leanCoffee: LeanCoffee) {","        self.leanCoffee = leanCoffee","    }","    ","    func getAllTopics() async {","        await perform {","            let unsortedTopics = try await AuthorizedHttpClient()","                .get(","                    decodeReponse: [Topic].self,","                    url: rootURL + \"\/leancoffee\/\\(self.leanCoffee.id)\/topics\"","                )","            ","            self.topics = unsortedTopics","                .sorted { $0.votes.count > $1.votes.count }","                .sorted { $0.completed == false && $1.completed }","        }","    }","    ","    private func voteOn(topic: Topic) async {","        await perform {","            try await AuthorizedHttpClient()","                .post(body: CastVote(topicId: topic.id), url: rootURL + \"\/votes\")","        }","    }","    ","    func voteAndReload(forTopic topic: Topic) {","        Task {","            await voteOn(topic: topic)","            await getAllTopics()","        }","    }","}"],"fileName":"LeanCoffeePresenter.swift","identifier":"LeanCoffeePresenter7.swift","type":"file","fileType":"swift","highlights":[{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38}]},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/Loading-and-Errors#The-AsyncView":{"role":"pseudoSymbol","title":"The AsyncView","abstract":[{"type":"text","text":"There’s nothing worse than an app that doesn’t show loading states or errors…"}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Loading-and-Errors#The-AsyncView","kind":"section","type":"section","url":"\/tutorials\/leancoffeeapp\/loading-and-errors#The-AsyncView"},"LeanCoffeeView13.swift":{"syntax":"swift","content":["import SwiftUI","","struct LeanCoffeeView: View {","    @ObservedObject var presenter: LeanCoffeePresenter","    ","    ","    @ViewBuilder func badge(for topic: Topic) -> some View {","        if topic.completed {","            Image(systemName: \"checkmark\")","                .frame(minWidth: 30, minHeight: 30)","                .background(Color.green.cornerRadius(.greatestFiniteMagnitude))","        } else {","            Text(\"\\(topic.votes.count)\")","                .frame(minWidth: 30, minHeight: 30)","                .background(Color.brown.cornerRadius(.greatestFiniteMagnitude))","        }","    }","    ","    ","    @ViewBuilder func swipeActions(for topic: Topic) -> some View {","        if topic.completed {","            EmptyView() \/\/ If the topic is complete, there is no need to swipe","        } else {","            \/\/ The first button will trigger automatically on a full swipe","            Button(action: { presenter.voteAndReload(forTopic: topic) }){","                Image(systemName: \"hand.thumbsup.fill\")","            }.tint(.green)","            ","            Button(action: { presenter.completeAndReload(forTopic: topic) })","            {","                Image(systemName: \"checkmark\")","            }.tint(Color.red)","        }","    }","    ","    ","    @ViewBuilder func listRow(for topic: Topic) -> some View {","        HStack {","            Spacer()","            ","            badge(for: topic)","                .font(.headline.bold())","                .foregroundColor(.white)","                .padding(.bottom)","            ","            Spacer()","        }","        ","        Text(topic.title)","            .font(.headline)","            .multilineTextAlignment(.center)","        ","        Text(topic.description)","            .font(.subheadline)","            .padding(.bottom)","            .lineLimit(6)","    }","    ","    ","    var body: some View {","        ","        Text(presenter.leanCoffee.title)","            .padding(.horizontal)","            .multilineTextAlignment(.center)","            .lineLimit(2)","        ","        List(presenter.topics) { topic in","            VStack(spacing: 16) {","                listRow(for: topic)","            }","            .padding(.vertical)","            .navigationTitle(Text(\"Topics\"))","            .swipeActions(edge: .trailing) { swipeActions(for: topic) }","        }","        .task {","            await presenter.getAllTopics()","        }","        .refreshable {","            await presenter.getAllTopics()","        }","        .toAsyncView(presenter)","    }","}"],"fileName":"LeanCoffeeView.swift","identifier":"LeanCoffeeView13.swift","type":"file","fileType":"swift","highlights":[{"line":81}]},"LeanCoffeePresenter5.swift":{"syntax":"swift","content":["import SwiftUI","","class LeanCoffeePresenter: Presenter {","    let leanCoffee: LeanCoffee","    ","    @Published var topics: [Topic] = []","    ","    init(_ leanCoffee: LeanCoffee) {","        self.leanCoffee = leanCoffee","    }","    ","    func getAllTopics() async {","        await perform {","            let unsortedTopics = try await AuthorizedHttpClient()","                .get(","                    decodeReponse: [Topic].self,","                    url: rootURL + \"\/leancoffee\/\\(self.leanCoffee.id)\/topics\"","                )","            ","            self.topics = unsortedTopics","                .sorted { $0.votes.count > $1.votes.count }","                .sorted { $0.completed == false && $1.completed }","        }","    }","}"],"fileName":"LeanCoffeePresenter.swift","identifier":"LeanCoffeePresenter5.swift","type":"file","fileType":"swift","highlights":[{"line":14},{"line":17}]},"LeanCoffeeView8.png":{"alt":"The lean coffee view","type":"image","identifier":"LeanCoffeeView8.png","variants":[{"url":"\/images\/LeanCoffeeView8.png","traits":["1x","light"]}]},"LeanCoffeeView3.png":{"alt":"The lean coffee view","type":"image","identifier":"LeanCoffeeView3.png","variants":[{"url":"\/images\/LeanCoffeeView3.png","traits":["1x","light"]}]},"doc://LeanCoffeeApp/tutorials/Tutorial-Table-of-Contents/Loading-and-Errors":{"role":"article","title":"Loading and Errors","abstract":[],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents\/Loading-and-Errors","kind":"article","type":"topic","url":"\/tutorials\/tutorial-table-of-contents\/loading-and-errors"},"LeanCoffeeView2.swift":{"syntax":"swift","content":["import SwiftUI","","struct LeanCoffeeView: View {","    let leanCoffee: LeanCoffee","    ","    @State var topics: [Topic] = (1..<4).compactMap {","        Topic(","            id: \"\\($0)\",","            title: \" Topic \\($0)\",","            description: \"Some Description\",","            completed: $0 % 2 == 0 ? true : false,","            votes: [Vote(id: \"\\($0)\")]","        )","    }","    ","    var body: some View {","        ","        Text(leanCoffee.title)","            .padding(.horizontal)","            .multilineTextAlignment(.center)","            .lineLimit(2)","        ","        List(topics) { topic in","            Text(topic.title)","        }","    }","}"],"fileName":"LeanCoffeeView.swift","identifier":"LeanCoffeeView2.swift","type":"file","fileType":"swift","highlights":[{"line":4},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22}]},"LeanCoffeeView6.png":{"alt":"The lean coffee view","type":"image","identifier":"LeanCoffeeView6.png","variants":[{"url":"\/images\/LeanCoffeeView6.png","traits":["1x","light"]}]},"doc://LeanCoffeeApp/tutorials/Tutorial-Table-of-Contents/In-the-Topics":{"role":"article","title":"In the Topics","abstract":[],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents\/In-the-Topics","kind":"article","type":"topic","url":"\/tutorials\/tutorial-table-of-contents\/in-the-topics"},"LeanCoffeeView5.swift":{"syntax":"swift","content":["import SwiftUI","","struct LeanCoffeeView: View {","    let leanCoffee: LeanCoffee","    ","    @State var topics: [Topic] = (1..<4).compactMap {","        Topic(","            id: \"\\($0)\",","            title: \" Topic \\($0)\",","            description: \"Some Description\",","            completed: $0 % 2 == 0 ? true : false,","            votes: [Vote(id: \"\\($0)\")]","        )","    }","    ","    var body: some View {","        ","        Text(leanCoffee.title)","            .padding(.horizontal)","            .multilineTextAlignment(.center)","            .lineLimit(2)","        ","        List(topics) { topic in","            VStack(spacing: 16) {","                HStack {","                    Spacer()","                    ","                    Text(\"\\(topic.votes.count)\")","                        .frame(minWidth: 30, minHeight: 30)","                        .background(","                            topic.completed","                            ? Color.green.cornerRadius(.greatestFiniteMagnitude)","                            : Color.brown.cornerRadius(.greatestFiniteMagnitude)","                        )","                        .font(.headline.bold())","                        .foregroundColor(.white)","                        .padding(.bottom)","                    ","                    Spacer()","                }","                ","                Text(topic.title)","                    .font(.headline)","                    .multilineTextAlignment(.center)","                ","                Text(topic.description)","                    .font(.subheadline)","                    .padding(.bottom)","                    .lineLimit(6)","            }","            ","        }","    }","}"],"fileName":"LeanCoffeeView.swift","identifier":"LeanCoffeeView5.swift","type":"file","fileType":"swift","highlights":[{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40}]},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/Presenter#A-basic-Presenter":{"role":"pseudoSymbol","title":"A basic Presenter","abstract":[{"type":"text","text":"In this chapter we’ll refactor the Sign in and Sign up views to use the Presenter pattern. This will allow us to reuse some of the code, and pull the business logic out of the view."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Presenter#A-basic-Presenter","kind":"section","type":"section","url":"\/tutorials\/leancoffeeapp\/presenter#A-basic-Presenter"},"LeanCoffeePresenter9.swift":{"syntax":"swift","content":["import SwiftUI","","class LeanCoffeePresenter: Presenter {","    let leanCoffee: LeanCoffee","    ","    @Published var topics: [Topic] = []","    ","    init(_ leanCoffee: LeanCoffee) {","        self.leanCoffee = leanCoffee","    }","    ","    func getAllTopics() async {","        await perform {","            let unsortedTopics = try await AuthorizedHttpClient()","                .get(","                    decodeReponse: [Topic].self,","                    url: rootURL + \"\/leancoffee\/\\(self.leanCoffee.id)\/topics\"","                )","            ","            self.topics = unsortedTopics","                .sorted { $0.votes.count > $1.votes.count }","                .sorted { $0.completed == false && $1.completed }","        }","    }","    ","    private func voteOn(topic: Topic) async {","        await perform {","            try await AuthorizedHttpClient()","                .post(body: CastVote(topicId: topic.id), url: rootURL + \"\/votes\")","        }","    }","    ","    func voteAndReload(forTopic topic: Topic) {","        Task {","            await voteOn(topic: topic)","            await getAllTopics()","        }","    }","    ","    private func complete(topic: Topic) async throws {","        try await AuthorizedHttpClient()","            .post(","                body: nil as String?,","                url: rootURL + \"\/topics\/\\(topic.id)\/complete\"","            )","    }","    ","    func completeAndReload(forTopic topic: Topic) {","        Task {","            await perform {","                try await self.complete(topic: topic)","                await self.getAllTopics()","            }","        }","    }","}"],"fileName":"LeanCoffeePresenter.swift","identifier":"LeanCoffeePresenter9.swift","type":"file","fileType":"swift","highlights":[{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55}]},"LeanCoffeePresenter6.swift":{"syntax":"swift","content":["import SwiftUI","","class LeanCoffeePresenter: Presenter {","    let leanCoffee: LeanCoffee","    ","    @Published var topics: [Topic] = []","    ","    init(_ leanCoffee: LeanCoffee) {","        self.leanCoffee = leanCoffee","    }","    ","    func getAllTopics() async {","        await perform {","            let unsortedTopics = try await AuthorizedHttpClient()","                .get(","                    decodeReponse: [Topic].self,","                    url: rootURL + \"\/leancoffee\/\\(self.leanCoffee.id)\/topics\"","                )","            ","            self.topics = unsortedTopics","                .sorted { $0.votes.count > $1.votes.count }","                .sorted { $0.completed == false && $1.completed }","        }","    }","    ","    private func voteOn(topic: Topic) async {","        await perform {","            try await AuthorizedHttpClient()","                .post(body: CastVote(topicId: topic.id), url: rootURL + \"\/votes\")","        }","    }","}"],"fileName":"LeanCoffeePresenter.swift","identifier":"LeanCoffeePresenter6.swift","type":"file","fileType":"swift","highlights":[{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31}]},"doc://LeanCoffeeApp/tutorials/Tutorial-Table-of-Contents/The-Presenter-Pattern":{"role":"article","title":"The Presenter Pattern","abstract":[],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents\/The-Presenter-Pattern","kind":"article","type":"topic","url":"\/tutorials\/tutorial-table-of-contents\/the-presenter-pattern"},"AuthorizedHttpClient2.swift":{"syntax":"swift","content":["import SwiftUI","","class AuthorizedHttpClient: HttpClient {","    @Environment(\\.tokenStore) var tokenStore: TokenStore","","    override init() { super.init() }","    ","    override func createRequest<T: Codable>(","        fromURL url: URL,","        withBody body: T?,","        withHeaders headers: [String : String] = [:],","        withMethod method: HTTPMethod","    ) throws -> URLRequest {","        var request = try super.createRequest(","            fromURL: url,","            withBody: body,","            withHeaders: headers,","            withMethod: method","        )","        ","        request.addValue(","            \"Bearer \\(tokenStore.accessToken?.value ?? \"\")\", forHTTPHeaderField: \"Authorization\"","        )","        return request","    }","}"],"fileName":"AuthorizedHttpClient.swift","identifier":"AuthorizedHttpClient2.swift","type":"file","fileType":"swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25}]},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/New-Lean-Coffee-Events-and-Topics#Form-Submissions":{"role":"pseudoSymbol","title":"Form Submissions","abstract":[{"type":"text","text":"In this chapter we’ll finish implementing the application’s core functionality by allowing the user to create Lean Coffee events and their topics."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/New-Lean-Coffee-Events-and-Topics#Form-Submissions","kind":"section","type":"section","url":"\/tutorials\/leancoffeeapp\/new-lean-coffee-events-and-topics#Form-Submissions"},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/New-Lean-Coffee-Events-and-Topics#Creating-a-Lean-Coffee":{"role":"pseudoSymbol","title":"Creating a Lean Coffee","abstract":[{"type":"text","text":"In this chapter we’ll finish implementing the application’s core functionality by allowing the user to create Lean Coffee events and their topics."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/New-Lean-Coffee-Events-and-Topics#Creating-a-Lean-Coffee","kind":"section","type":"section","url":"\/tutorials\/leancoffeeapp\/new-lean-coffee-events-and-topics#Creating-a-Lean-Coffee"},"LeanCoffeeView8.swift":{"syntax":"swift","content":["import SwiftUI","","struct LeanCoffeeView: View {","    let leanCoffee: LeanCoffee","    ","    @State var topics: [Topic] = (1..<4).compactMap {","        Topic(","            id: \"\\($0)\",","            title: \" Topic \\($0)\",","            description: \"Some Description\",","            completed: $0 % 2 == 0 ? true : false,","            votes: [Vote(id: \"\\($0)\")]","        )","    }","    ","    @ViewBuilder func badge(for topic: Topic) -> some View {","        if topic.completed {","            Image(systemName: \"checkmark\")","                .frame(minWidth: 30, minHeight: 30)","                .background(Color.green.cornerRadius(.greatestFiniteMagnitude))","        } else {","            Text(\"\\(topic.votes.count)\")","                .frame(minWidth: 30, minHeight: 30)","                .background(Color.brown.cornerRadius(.greatestFiniteMagnitude))","        }","    }","    ","    ","    var body: some View {","        ","        Text(leanCoffee.title)","            .padding(.horizontal)","            .multilineTextAlignment(.center)","            .lineLimit(2)","        ","        List(topics) { topic in","            VStack(spacing: 16) {","                HStack {","                    Spacer()","                    ","                    badge(for: topic)","                        .font(.headline.bold())","                        .foregroundColor(.white)","                        .padding(.bottom)","                    ","                    Spacer()","                }","                ","                Text(topic.title)","                    .font(.headline)","                    .multilineTextAlignment(.center)","                ","                Text(topic.description)","                    .font(.subheadline)","                    .padding(.bottom)","                    .lineLimit(6)","            }","            .padding(.vertical)","            .navigationTitle(Text(\"Topics\"))","            .swipeActions(edge: .trailing) {","                if topic.completed {","                    EmptyView() \/\/ If the topic is complete, there is no need to swipe","                } else {","                    \/\/ The first button will trigger automatically on a full swipe","                    Button(action: { print(\"Voted\") }){","                        Image(systemName: \"hand.thumbsup.fill\")","                    }.tint(.green)","                    ","                    Button(action: { print(\"Topic completed\") })","                    {","                        Image(systemName: \"checkmark\")","                    }.tint(Color.red)","                }","            }","        }","    }","}"],"fileName":"LeanCoffeeView.swift","identifier":"LeanCoffeeView8.swift","type":"file","fileType":"swift","highlights":[{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74}]},"LeanCoffeeView9.png":{"alt":"The lean coffee view","type":"image","identifier":"LeanCoffeeView9.png","variants":[{"url":"\/images\/LeanCoffeeView9.png","traits":["1x","light"]}]},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/New-Lean-Coffee-Events-and-Topics#You-did-it!-%F0%9F%94%A5%E2%98%9D%EF%B8%8F":{"role":"pseudoSymbol","title":"You did it! 🔥☝️","abstract":[{"type":"text","text":"In this chapter we’ll finish implementing the application’s core functionality by allowing the user to create Lean Coffee events and their topics."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/New-Lean-Coffee-Events-and-Topics#You-did-it!-%F0%9F%94%A5%E2%98%9D%EF%B8%8F","kind":"section","type":"section","url":"\/tutorials\/leancoffeeapp\/new-lean-coffee-events-and-topics#You-did-it!-%25F0%259F%2594%25A5%25E2%2598%259D%25EF%25B8%258F"},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/Sign-in-and-Sign-up":{"role":"project","title":"Sign in and Sign up","estimatedTime":"20min","abstract":[{"type":"text","text":"Use the view from Chapter 1 to present a Sign in or Sign up form and log a user into the application."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Sign-in-and-Sign-up","kind":"project","type":"topic","url":"\/tutorials\/leancoffeeapp\/sign-in-and-sign-up"},"doc://LeanCoffeeApp/tutorials/Tutorial-Table-of-Contents/Authentication":{"role":"article","title":"Authentication","abstract":[],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents\/Authentication","kind":"article","type":"topic","url":"\/tutorials\/tutorial-table-of-contents\/authentication"},"doc://LeanCoffeeApp/tutorials/Tutorial-Table-of-Contents/Lists-and-Dependencies":{"role":"article","title":"Lists and Dependencies","abstract":[],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents\/Lists-and-Dependencies","kind":"article","type":"topic","url":"\/tutorials\/tutorial-table-of-contents\/lists-and-dependencies"},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/Lean-Coffee-Topics#Creating-the-Lean-Coffee-View":{"role":"pseudoSymbol","title":"Creating the Lean Coffee View","abstract":[{"type":"text","text":"Learn how to crate custom list rows with swipe actions, sorting, and more."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Lean-Coffee-Topics#Creating-the-Lean-Coffee-View","kind":"section","type":"section","url":"\/tutorials\/leancoffeeapp\/lean-coffee-topics#Creating-the-Lean-Coffee-View"},"LeanCoffeeView4.swift":{"syntax":"swift","content":["import SwiftUI","","struct LeanCoffeeView: View {","    let leanCoffee: LeanCoffee","    ","    @State var topics: [Topic] = (1..<4).compactMap {","        Topic(","            id: \"\\($0)\",","            title: \" Topic \\($0)\",","            description: \"Some Description\",","            completed: $0 % 2 == 0 ? true : false,","            votes: [Vote(id: \"\\($0)\")]","        )","    }","    ","    var body: some View {","        ","        Text(leanCoffee.title)","            .padding(.horizontal)","            .multilineTextAlignment(.center)","            .lineLimit(2)","        ","        List(topics) { topic in","            VStack(spacing: 16) {","                Text(\"\\(topic.votes.count)\")","                    .frame(minWidth: 30, minHeight: 30)","                    .background(","                        topic.completed","                        ? Color.green.cornerRadius(.greatestFiniteMagnitude)","                        : Color.brown.cornerRadius(.greatestFiniteMagnitude)","                    )","                    .font(.headline.bold())","                    .foregroundColor(.white)","                    .padding(.bottom)","                ","                Text(topic.title)","                    .font(.headline)","                    .multilineTextAlignment(.center)","                ","                Text(topic.description)","                    .font(.subheadline)","                    .padding(.bottom)","                    .lineLimit(6)","            }","            ","        }","    }","}"],"fileName":"LeanCoffeeView.swift","identifier":"LeanCoffeeView4.swift","type":"file","fileType":"swift","highlights":[{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35}]},"LeanCoffeeView4.png":{"alt":"The lean coffee view","type":"image","identifier":"LeanCoffeeView4.png","variants":[{"url":"\/images\/LeanCoffeeView4.png","traits":["1x","light"]}]},"LeanCoffeePresenter2.swift":{"syntax":"swift","content":["import SwiftUI","","class LeanCoffeePresenter: Presenter {","    let leanCoffee: LeanCoffee","    @Environment(\\.tokenStore) var tokenStore: TokenStore","    ","    @Published var topics: [Topic] = []","    ","    init(_ leanCoffee: LeanCoffee) {","        self.leanCoffee = leanCoffee","    }","    ","    func getAllTopics() async {","        await perform {","            let header = [\"Authorization\": \"Bearer \\(self.tokenStore.accessToken?.value ?? \"\")\"]","        }","    }","}"],"fileName":"LeanCoffeePresenter.swift","identifier":"LeanCoffeePresenter2.swift","type":"file","fileType":"swift","highlights":[{"line":5},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17}]},"LeanCoffeeView5.png":{"alt":"The lean coffee view","type":"image","identifier":"LeanCoffeeView5.png","variants":[{"url":"\/images\/LeanCoffeeView5.png","traits":["1x","light"]}]},"doc://LeanCoffeeApp/tutorials/Tutorial-Table-of-Contents":{"role":"overview","title":"Lean Coffee","abstract":[{"type":"text","text":"Create a Lean Coffee app for iOS! Create lean coffee events, topics, and votes without the pens or sticky notes!"}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents","kind":"overview","type":"topic","url":"\/tutorials\/tutorial-table-of-contents"},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/Presenter":{"role":"project","title":"The Presenter Pattern","estimatedTime":"35min","abstract":[{"type":"text","text":"In this chapter we’ll refactor the Sign in and Sign up views to use the Presenter pattern. This will allow us to reuse some of the code, and pull the business logic out of the view."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Presenter","kind":"project","type":"topic","url":"\/tutorials\/leancoffeeapp\/presenter"},"LeanCoffeeView12.swift":{"syntax":"swift","content":["import SwiftUI","","struct LeanCoffeeView: View {","    @ObservedObject var presenter: LeanCoffeePresenter","    ","    ","    @ViewBuilder func badge(for topic: Topic) -> some View {","        if topic.completed {","            Image(systemName: \"checkmark\")","                .frame(minWidth: 30, minHeight: 30)","                .background(Color.green.cornerRadius(.greatestFiniteMagnitude))","        } else {","            Text(\"\\(topic.votes.count)\")","                .frame(minWidth: 30, minHeight: 30)","                .background(Color.brown.cornerRadius(.greatestFiniteMagnitude))","        }","    }","    ","    ","    @ViewBuilder func swipeActions(for topic: Topic) -> some View {","        if topic.completed {","            EmptyView() \/\/ If the topic is complete, there is no need to swipe","        } else {","            \/\/ The first button will trigger automatically on a full swipe","            Button(action: { presenter.voteAndReload(forTopic: topic) }){","                Image(systemName: \"hand.thumbsup.fill\")","            }.tint(.green)","            ","            Button(action: { presenter.completeAndReload(forTopic: topic) })","            {","                Image(systemName: \"checkmark\")","            }.tint(Color.red)","        }","    }","    ","    ","    @ViewBuilder func listRow(for topic: Topic) -> some View {","        HStack {","            Spacer()","            ","            badge(for: topic)","                .font(.headline.bold())","                .foregroundColor(.white)","                .padding(.bottom)","            ","            Spacer()","        }","        ","        Text(topic.title)","            .font(.headline)","            .multilineTextAlignment(.center)","        ","        Text(topic.description)","            .font(.subheadline)","            .padding(.bottom)","            .lineLimit(6)","    }","    ","    ","    var body: some View {","        ","        Text(presenter.leanCoffee.title)","            .padding(.horizontal)","            .multilineTextAlignment(.center)","            .lineLimit(2)","        ","        List(presenter.topics) { topic in","            VStack(spacing: 16) {","                listRow(for: topic)","            }","            .padding(.vertical)","            .navigationTitle(Text(\"Topics\"))","            .swipeActions(edge: .trailing) { swipeActions(for: topic) }","        }","        .task {","            await presenter.getAllTopics()","        }","        .refreshable {","            await presenter.getAllTopics()","        }","    }","}"],"fileName":"LeanCoffeeView.swift","identifier":"LeanCoffeeView12.swift","type":"file","fileType":"swift","highlights":[{"line":25},{"line":29}]},"LeanCoffeeView2.png":{"alt":"The lean coffee view","type":"image","identifier":"LeanCoffeeView2.png","variants":[{"url":"\/images\/LeanCoffeeView2.png","traits":["1x","light"]}]},"doc://LeanCoffeeApp/tutorials/Tutorial-Table-of-Contents/Getting-started-with-SwiftUI":{"role":"article","title":"Getting started with SwiftUI","abstract":[],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/Tutorial-Table-of-Contents\/Getting-started-with-SwiftUI","kind":"article","type":"topic","url":"\/tutorials\/tutorial-table-of-contents\/getting-started-with-swiftui"},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/Presenter#The-Sign-In-Presenter":{"role":"pseudoSymbol","title":"The Sign In Presenter","abstract":[{"type":"text","text":"In this chapter we’ll refactor the Sign in and Sign up views to use the Presenter pattern. This will allow us to reuse some of the code, and pull the business logic out of the view."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Presenter#The-Sign-In-Presenter","kind":"section","type":"section","url":"\/tutorials\/leancoffeeapp\/presenter#The-Sign-In-Presenter"},"LeanCoffeePresenter4-copy.swift":{"syntax":"swift","content":["import SwiftUI","","class LeanCoffeePresenter: Presenter {","    let leanCoffee: LeanCoffee","    @Environment(\\.tokenStore) var tokenStore: TokenStore","    ","    @Published var topics: [Topic] = []","    ","    init(_ leanCoffee: LeanCoffee) {","        self.leanCoffee = leanCoffee","    }","    ","    func getAllTopics() async {","        await perform {","            let header = [\"Authorization\": \"Bearer \\(self.tokenStore.accessToken?.value ?? \"\")\"]","            let unsortedTopics = try await HttpClient()","                .get(","                    decodeReponse: [Topic].self,","                    url: rootURL + \"\/leancoffee\/\\(self.leanCoffee.id)\/topics\",","                    withHeaders: header","                )","            ","            self.topics = unsortedTopics","                .sorted { $0.votes.count > $1.votes.count }","                .sorted { $0.completed == false && $1.completed }","        }","    }","}"],"fileName":"LeanCoffeePresenter.swift","identifier":"LeanCoffeePresenter4-copy.swift","type":"file","fileType":"swift","highlights":[]},"LeanCoffeeView14.png":{"alt":"The lean coffee view","type":"image","identifier":"LeanCoffeeView14.png","variants":[{"url":"\/images\/LeanCoffeeView14.png","traits":["1x","light"]}]},"LeanCoffeeView1.png":{"alt":"The lean coffee view","type":"image","identifier":"LeanCoffeeView1.png","variants":[{"url":"\/images\/LeanCoffeeView1.png","traits":["1x","light"]}]},"LeanCoffeeView7.png":{"alt":"The lean coffee view","type":"image","identifier":"LeanCoffeeView7.png","variants":[{"url":"\/images\/LeanCoffeeView7.png","traits":["1x","light"]}]},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/New-Lean-Coffee-Events-and-Topics":{"role":"project","title":"Let there be Coffee","estimatedTime":"45min","abstract":[{"type":"text","text":"In this chapter we’ll finish implementing the application’s core functionality by allowing the user to create Lean Coffee events and their topics."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/New-Lean-Coffee-Events-and-Topics","kind":"project","type":"topic","url":"\/tutorials\/leancoffeeapp\/new-lean-coffee-events-and-topics"},"LeanCoffeeView6.swift":{"syntax":"swift","content":["import SwiftUI","","struct LeanCoffeeView: View {","    let leanCoffee: LeanCoffee","    ","    @State var topics: [Topic] = (1..<4).compactMap {","        Topic(","            id: \"\\($0)\",","            title: \" Topic \\($0)\",","            description: \"Some Description\",","            completed: $0 % 2 == 0 ? true : false,","            votes: [Vote(id: \"\\($0)\")]","        )","    }","    ","    @ViewBuilder func badge(for topic: Topic) -> some View {","        if topic.completed {","            Image(systemName: \"checkmark\")","                .frame(minWidth: 30, minHeight: 30)","                .background(Color.green.cornerRadius(.greatestFiniteMagnitude))","        } else {","            Text(\"\\(topic.votes.count)\")","                .frame(minWidth: 30, minHeight: 30)","                .background(Color.brown.cornerRadius(.greatestFiniteMagnitude))","        }","    }","    ","    ","    var body: some View {","        ","        Text(leanCoffee.title)","            .padding(.horizontal)","            .multilineTextAlignment(.center)","            .lineLimit(2)","        ","        List(topics) { topic in","            VStack(spacing: 16) {","                HStack {","                    Spacer()","                    ","                    badge(for: topic)","                        .font(.headline.bold())","                        .foregroundColor(.white)","                        .padding(.bottom)","                    ","                    Spacer()","                }","                ","                Text(topic.title)","                    .font(.headline)","                    .multilineTextAlignment(.center)","                ","                Text(topic.description)","                    .font(.subheadline)","                    .padding(.bottom)","                    .lineLimit(6)","            }","            ","        }","    }","}"],"fileName":"LeanCoffeeView.swift","identifier":"LeanCoffeeView6.swift","type":"file","fileType":"swift","highlights":[{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":41}]},"LeanCoffeeView7.swift":{"syntax":"swift","content":["import SwiftUI","","struct LeanCoffeeView: View {","    let leanCoffee: LeanCoffee","    ","    @State var topics: [Topic] = (1..<4).compactMap {","        Topic(","            id: \"\\($0)\",","            title: \" Topic \\($0)\",","            description: \"Some Description\",","            completed: $0 % 2 == 0 ? true : false,","            votes: [Vote(id: \"\\($0)\")]","        )","    }","    ","    @ViewBuilder func badge(for topic: Topic) -> some View {","        if topic.completed {","            Image(systemName: \"checkmark\")","                .frame(minWidth: 30, minHeight: 30)","                .background(Color.green.cornerRadius(.greatestFiniteMagnitude))","        } else {","            Text(\"\\(topic.votes.count)\")","                .frame(minWidth: 30, minHeight: 30)","                .background(Color.brown.cornerRadius(.greatestFiniteMagnitude))","        }","    }","    ","    ","    var body: some View {","        ","        Text(leanCoffee.title)","            .padding(.horizontal)","            .multilineTextAlignment(.center)","            .lineLimit(2)","        ","        List(topics) { topic in","            VStack(spacing: 16) {","                HStack {","                    Spacer()","                    ","                    badge(for: topic)","                        .font(.headline.bold())","                        .foregroundColor(.white)","                        .padding(.bottom)","                    ","                    Spacer()","                }","                ","                Text(topic.title)","                    .font(.headline)","                    .multilineTextAlignment(.center)","                ","                Text(topic.description)","                    .font(.subheadline)","                    .padding(.bottom)","                    .lineLimit(6)","            }","            .padding(.vertical)","            .navigationTitle(Text(\"Topics\"))","            ","        }","    }","}"],"fileName":"LeanCoffeeView.swift","identifier":"LeanCoffeeView7.swift","type":"file","fileType":"swift","highlights":[{"line":58},{"line":59}]},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/New-Lean-Coffee-Events-and-Topics#Creating-a-Topic":{"role":"pseudoSymbol","title":"Creating a Topic","abstract":[{"type":"text","text":"In this chapter we’ll finish implementing the application’s core functionality by allowing the user to create Lean Coffee events and their topics."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/New-Lean-Coffee-Events-and-Topics#Creating-a-Topic","kind":"section","type":"section","url":"\/tutorials\/leancoffeeapp\/new-lean-coffee-events-and-topics#Creating-a-Topic"},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/Lean-Coffee-Topics":{"role":"project","title":"The Lean Coffee View","estimatedTime":"1hr 0min","abstract":[{"type":"text","text":"Learn how to crate custom list rows with swipe actions, sorting, and more."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Lean-Coffee-Topics","kind":"project","type":"topic","url":"\/tutorials\/leancoffeeapp\/lean-coffee-topics"},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/Sign-in-and-Sign-up#Creating-the-Sign-in-View":{"role":"pseudoSymbol","title":"Creating the Sign in View","abstract":[{"type":"text","text":"Use the view from Chapter 1 to present a Sign in or Sign up form and log a user into the application."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Sign-in-and-Sign-up#Creating-the-Sign-in-View","kind":"section","type":"section","url":"\/tutorials\/leancoffeeapp\/sign-in-and-sign-up#Creating-the-Sign-in-View"},"LeanCoffeeView11.swift":{"syntax":"swift","content":["import SwiftUI","","struct LeanCoffeeView: View {","    @ObservedObject var presenter: LeanCoffeePresenter","    ","    ","    @ViewBuilder func badge(for topic: Topic) -> some View {","        if topic.completed {","            Image(systemName: \"checkmark\")","                .frame(minWidth: 30, minHeight: 30)","                .background(Color.green.cornerRadius(.greatestFiniteMagnitude))","        } else {","            Text(\"\\(topic.votes.count)\")","                .frame(minWidth: 30, minHeight: 30)","                .background(Color.brown.cornerRadius(.greatestFiniteMagnitude))","        }","    }","    ","    ","    @ViewBuilder func swipeActions(for topic: Topic) -> some View {","        if topic.completed {","            EmptyView() \/\/ If the topic is complete, there is no need to swipe","        } else {","            \/\/ The first button will trigger automatically on a full swipe","            Button(action: { print(\"Voted\") }){","                Image(systemName: \"hand.thumbsup.fill\")","            }.tint(.green)","            ","            Button(action: { print(\"Topic completed\") })","            {","                Image(systemName: \"checkmark\")","            }.tint(Color.red)","        }","    }","    ","    ","    @ViewBuilder func listRow(for topic: Topic) -> some View {","        HStack {","            Spacer()","            ","            badge(for: topic)","                .font(.headline.bold())","                .foregroundColor(.white)","                .padding(.bottom)","            ","            Spacer()","        }","        ","        Text(topic.title)","            .font(.headline)","            .multilineTextAlignment(.center)","        ","        Text(topic.description)","            .font(.subheadline)","            .padding(.bottom)","            .lineLimit(6)","    }","    ","    ","    var body: some View {","        ","        Text(presenter.leanCoffee.title)","            .padding(.horizontal)","            .multilineTextAlignment(.center)","            .lineLimit(2)","        ","        List(presenter.topics) { topic in","            VStack(spacing: 16) {","                listRow(for: topic)","            }","            .padding(.vertical)","            .navigationTitle(Text(\"Topics\"))","            .swipeActions(edge: .trailing) { swipeActions(for: topic) }","        }","        .task {","            await presenter.getAllTopics()","        }","        .refreshable {","            await presenter.getAllTopics()","        }","    }","}"],"fileName":"LeanCoffeeView.swift","identifier":"LeanCoffeeView11.swift","type":"file","fileType":"swift","highlights":[{"line":4},{"line":62},{"line":67},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80}]},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/List-View":{"role":"project","title":"Create the List View and understand Swift's flavor of Dependency Injection","estimatedTime":"35min","abstract":[{"type":"text","text":"Create the list view of all the Lean Coffee Events and learn about Dependency Injection with SwiftUI."}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/List-View","kind":"project","type":"topic","url":"\/tutorials\/leancoffeeapp\/list-view"},"LeanCoffeeView11.png":{"alt":"The lean coffee view","type":"image","identifier":"LeanCoffeeView11.png","variants":[{"url":"\/images\/LeanCoffeeView11.png","traits":["1x","light"]}]},"LeanCoffeeView10.png":{"alt":"The lean coffee view","type":"image","identifier":"LeanCoffeeView10.png","variants":[{"url":"\/images\/LeanCoffeeView10.png","traits":["1x","light"]}]},"coffee-beans.png":{"alt":"Coffee Beans","type":"image","identifier":"coffee-beans.png","variants":[{"url":"\/images\/coffee-beans.png","traits":["1x","light"]}]},"doc://LeanCoffeeApp/tutorials/LeanCoffeeApp/Loading-and-Errors#A-Loading-View":{"role":"pseudoSymbol","title":"A Loading View","abstract":[{"type":"text","text":"There’s nothing worse than an app that doesn’t show loading states or errors…"}],"identifier":"doc:\/\/LeanCoffeeApp\/tutorials\/LeanCoffeeApp\/Loading-and-Errors#A-Loading-View","kind":"section","type":"section","url":"\/tutorials\/leancoffeeapp\/loading-and-errors#A-Loading-View"},"HttpClient1.swift":{"syntax":"swift","content":["import Foundation","","class HttpClient {","","    func createRequest<T: Codable>(","        fromURL url: URL,","        withBody body: T?,","        withHeaders headers: [String : String] = [:],","        withMethod method: HTTPMethod","    ) throws -> URLRequest {","        ","        var request = URLRequest(url: url)","        if let body = body {","            request.httpBody = try JSONEncoder().encode(body)","        }","        ","        request.httpMethod = method.allCaps","        ","        if method == .post {","            request.addValue(\"application\/json\", forHTTPHeaderField: \"Content-Type\")","        }","        ","        headers.forEach { key, value in","            request.addValue(value, forHTTPHeaderField: key)","        }","        ","        return request","    }","","}"],"fileName":"HttpClient.swift","identifier":"HttpClient1.swift","type":"file","fileType":"swift","highlights":[]}}}